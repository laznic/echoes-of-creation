---
import Layout from "../layouts/Layout.astro";

import "splitting/dist/splitting.css";
import "splitting/dist/splitting-cells.css";
import ImageWithHole from "../components/ImageWithHole.astro";
import ImageWithCuts from "../components/ImageWithCuts.astro";
import ThoughtBlob from "../components/ThoughtBlob.astro";
import ExpandingImage from "../components/ExpandingImage.astro";
import BadBlob from "../components/BadBlob.astro";

const gridOrder = [1, 2, 3, 4, 5, 6, 7, 8, 9] // [5, 8, 1, 9, 7, 4, 6, 3, 2]
const shuffled = [...gridOrder]
shuffle(shuffled)

const testing = new Array(64).fill(null)

function shuffle(array: number[]) {
  let currentIndex = array.length;

  // While there remain elements to shuffle...
  while (currentIndex != 0) {

    // Pick a remaining element...
    let randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex--;

    // And swap it with the current element.
    [array[currentIndex], array[randomIndex]] = [
      array[randomIndex], array[currentIndex]];
  }
}

---
<Layout title="Home">
	<main>
		<header>
			<h1 class="text-2xl">Echoes of Creation: Tradition and Innovation</h1>
			<p>By Niklas Lepist√∂ & Jani Reijonen</p>
			<p>Welcome to "Echoes of Creation: Tradition and Innovation," where we dive into artistry in a tech-driven world. Follow our protagonist's emotional journey as generative AI shakes up the art scene. Explore how tradition and innovation collide, revealing the timeless struggles and triumphs of creativity in today's landscape.</p>
			
			<button>Toggle sound</button>
			<button>Autoplay with narration</button>
		</header>
		<ThoughtBlob />
		<div id="main-grid" class="w-[100vw] h-[200dvh] relative">
				{testing.map((yes) => (
					<div class="absolute item rounded-md bg-white w-96 h-72 overflow-hidden">
						<img src="https://picsum.photos/200/300" alt="random image" class="w-full h-full object-cover" />
					</div>
				))}
				{testing.map((yes) => (
					<div class="absolute item-right rounded-md bg-white w-96 h-72 overflow-hidden">
						<img src="https://picsum.photos/200/300" alt="random image" class="w-full h-full object-cover" />
					</div>
				))}
		</div>
		
		<div class="flash-container h-12">
			 <div class="flash w-full h-[100dvh] fixed top-0 bg-white opacity-0"></div>
		</div>

		<div class="second h-[100dvh] relative overflow-visible"></div>

		<div class="third h-[100dvh]"></div>

		<div class="fourth h-[100dvh]"></div>

		<div class="fifth h-[100dvh] z-20">
			<BadBlob />
			<BadBlob />
			<BadBlob />
		</div>

		<div class="sixth h-[100dvh]"></div>

		<div class="seventh h-[400dvh]">
			<div class="relative">
				<h2 data-splitting class="what-the text-2xl font-bold">What the hell</h2>

				<div class="black-hole-wrapper absolute -top-1/2 left-12 w-72 h-60">
					<div class="w-1/2 h-1/2 rounded-full bg-indigo-300 absolute mix-blend-overlay blur-xl" />
					<svg class="overflow-visible w-full h-full" >
						<defs>
							<radialGradient id="black-hole-gradient" >
								<stop offset="10%" stop-color="#a5b4fc" />
								<stop offset="50%" stop-color="transparent" />
								<stop offset="75%" stop-color="#cbd5e1" />
								<stop offset="100%" stop-color="transparent" />
							</radialGradient>
	
							<filter id="black-hole-filter">
								<feDiffuseLighting in="SourceGraphic" result="light" lighting-color="white">
									<fePointLight x="25" y="20" z="10" />
								</feDiffuseLighting>
						
								<feComposite
									in="SourceGraphic"
									in2="light"
									operator="arithmetic"
									k1="1"
									k2="0"
									k3="0"
									k4="0"
									result="lighting"
									/>

								<feTurbulence baseFrequency="0.02" numOctaves="1" type="fractalNoise" result="turbulence">
									<animate
										attributeName="baseFrequency"
										values="0.1; 0.05; 0.03; 0.05; 0.1"
										dur="5s"
										repeatCount="indefinite"
										/>
								</feTurbulence>
								<feDisplacementMap in="lighting" in2="turbulence" scale="10" result="displacement">
									<animate
										attributeName="scale"
										values="50; 25; 50"
										dur="5s"
										repeatCount="indefinite"
										/>
								</feDisplacementMap>
								<feMorphology operator="dilate" radius="0.5" />
							</filter>
						</defs>
	
						<circle class="black-hole-circle overflow-visible" cx="100" cy="50" r="50" fill="url(#black-hole-gradient)" filter="url(#black-hole-filter)" />
					</svg>
				</div>

			</div>
		</div>

		<div class="main-images fixed top-0 left-0 w-full h-[100dvh] grid content-center items-center">
			<img src="https://picsum.photos/800/600" class="main-image h-auto w-full absolute mx-auto max-w-fit left-0 right-0" />
			<img src="https://picsum.photos/800/600" class="main-image h-auto w-full absolute mx-auto max-w-fit left-0 right-0" />
			<img src="https://picsum.photos/800/600" class="main-image h-auto w-full absolute mx-auto max-w-fit left-0 right-0" />
			<img src="https://picsum.photos/800/600" class="main-image h-auto w-full absolute mx-auto max-w-fit left-0 right-0" />
			<img src="https://picsum.photos/800/600" class="main-image h-auto w-full absolute mx-auto max-w-fit left-0 right-0" />
			<img src="https://picsum.photos/800/600" class="main-image h-auto w-full absolute mx-auto max-w-fit left-0 right-0" />
			<img src="https://picsum.photos/800/600" class="main-image h-auto w-full absolute mx-auto max-w-fit left-0 right-0" />
			<img src="https://picsum.photos/800/600" class="main-image h-auto w-full absolute mx-auto max-w-fit left-0 right-0" />

			<svg>
				<filter id="pixelate" x="0" y="0">
					<feFlood x="4" y="4" height="2" width="2">
						<animate
							attributeName="height"
							values="2; 1; 2"
							dur="1s"
							repeatCount="indefinite"
							/>
						<animate
							attributeName="width"
							values="2; 1; 2"
							dur="1s"
							repeatCount="indefinite"
							/>
					</feFlood>
					<feComposite width="10" height="10">
						<animate
						attributeName="width"
						values="10; 1; 10"
						dur="1s"
						repeatCount="indefinite"
						/>
						<animate
						attributeName="height"
						values="10; 1; 10"
						dur="1s"
						repeatCount="indefinite"
						/>
					</feComposite>
					<feTile result="a"/>
					<feComposite in="SourceGraphic" in2="a" operator="in"/>
					<feMorphology operator="dilate" radius="5">
						<animate
						attributeName="radius"
						values="5; 0; 5"
						dur="1s"
						repeatCount="indefinite"
						/>
					</feMorphology>
				</filter>
			</svg>
		</div>

		<ExpandingImage />
	</main>
</Layout>

<style>
	.glow {
		width: 480px;
		height: 480px;
		background: green;
		border-radius: 50%;
		position: absolute;
		top: 0;
		left: 0;
		mix-blend-mode: difference;
	}

</style>

<script>
	import Lenis from '@studio-freight/lenis'
	import gsap from 'gsap'
	import ScrollTrigger from 'gsap/ScrollTrigger'
	import Splitting from 'splitting'

	Splitting()

	const lenis = new Lenis({
		lerp: 0.0375,
		// smoothWheel: true
	})

	lenis.on('scroll', ScrollTrigger.update)

	gsap.ticker.add((time) => {
		lenis.raf(time * 1000)
	})

	gsap.ticker.lagSmoothing(0)
	gsap.registerPlugin(ScrollTrigger)

	// const title = document.querySelector('h2')
	// const chars = title.querySelectorAll('.char')
			
	// chars.forEach(char => gsap.set(char.parentNode, { perspective: 500 })); 

	const timeline = gsap.timeline()
	const firstSection = document.querySelector('.first-section')
	const mainGrid = document.querySelector('#main-grid')
	const second = document.querySelector('.second')
	const third = document.querySelector('.third')
	const items = mainGrid.querySelectorAll('.item')
	const itemsRight = mainGrid.querySelectorAll('.item-right')
	const title = document.querySelector('.what-the')
	const chars = title.querySelectorAll('.char')
	chars.forEach(char => gsap.set(char.parentNode, { perspective: 1000 }));

	timeline
		.set(mainGrid, { perspective: 200, perspectiveOrigin: '57.5% 30%' })
		.set(itemsRight, { z: () => gsap.utils.random(-1, 1), scale: () => gsap.utils.random(0.5, 4) })
		.set(items, { z: () => gsap.utils.random(-1, 1), scale: () => gsap.utils.random(0.5, 4) })
		.set('.flash', { opacity: 0 })
		.set('.second', { perspective: 1000 })
		.set('.third', { perspective: 1000 })
		.set('.fourth', { perspective: 1000 })
		.set('.fifth', { perspective: 1000 })
		.set('.sixth', { perspective: 1000 })
		.set('.seventh', { perspective: 1000 })
		.set('.bad-blob', { scale: 0 })
		.set('.bad-blob-wrapper', { y: window.innerHeight })
		.fromTo(items, {
			z: () => gsap.utils.random(20, -1),
			x: () => gsap.utils.random(window.innerHeight * -2, window.innerHeight * -2 - 500),
			y: () => gsap.utils.random(window.innerHeight * 2, -window.innerHeight),
			filter: 'blur(30px)'
		}, {
			x: 0,
			scale: 0,
			z: -window.innerHeight,
			y: 0,
			filter: 'blur(0px)',
			stagger: 0.02,
			scrollTrigger: {
				pin: mainGrid,
				pinSpacing: false,
				trigger: mainGrid,
				scrub: true,
				start: 'top top',
				end: 'bottom center',
			}
		})
		.fromTo(itemsRight, {
			z: () => gsap.utils.random(20, -1),
			x: () => gsap.utils.random(window.innerWidth * 2 + 500, window.innerWidth * 2),
			y: () => gsap.utils.random(window.innerHeight * 2, -window.innerHeight),
			filter: 'blur(30px)'
		}, {
			x: 0,
			scale: 0,
			z: -window.innerHeight,
			y: 0,
			filter: 'blur(0px)',
			stagger: 0.02,
			scrollTrigger: {
				pinSpacing: false,
				trigger: mainGrid,
				scrub: true,
				start: 'top top',
				end: 'bottom center',
			}
		})
		.fromTo('.blob-circle', {
			r: 10,
		}, {
			r: 0,
			scrollTrigger: {
				trigger: mainGrid,
				pinSpacing: false,
				scrub: true,
				start: (self) => self.previous().end,
				end: 'bottom-=5%',
			}
		})
		.fromTo('.flash', 
		{
			opacity: 0
		},
		{
			opacity: 0.5,
			scrollTrigger: {
				trigger: '.flash-container',
				pinSpacing: false,
				scrub: true,
				start: (self) => self.previous().end,
				end: 'bottom-=150%',
			}
		})
		.fromTo('.flash', 
		{
			opacity: 0.5
		},
		{
			opacity: 0,
			scrollTrigger: {
				trigger: '.flash-container',
				pinSpacing: false,
				scrub: true,
				start: (self) => self.previous().end,
				end: 'bottom+=1000%',
			}
		})
		.fromTo('.actual-expanding-image', {
			filter: 'blur(20px)',
			scale: 5,
			// y: window.innerHeight * -1.5,
			// transformOrigin: 'center center'
		}, {
			scale: 1,
			filter: 'blur(0px)',
			scrollTrigger: {
				pin: second,
				trigger: second,
				scrub: true,
				start: 'top top',
				end: 'bottom-=50%',
			}
		})
		.fromTo('.glow-circle', {
			r: 0,
			cx: window.innerWidth / 2,
			cy: window.innerHeight / 2,
		}, {
			r: window.innerWidth,
			scrollTrigger: {
				pinSpacing: false,
				trigger: second,
				scrub: true,
				start: 'top top',
				end: 'bottom-=50%',
			}
		})
		.fromTo('.hole-circle', {
			r: 0,
			cx: window.innerWidth / 2,
			cy: window.innerHeight / 2,
		}, {
			r: window.innerWidth,
			scrollTrigger: {
				trigger: second,
				pinSpacing: false,
				scrub: true,
				start: 'top top',
				end: 'bottom-=50%',
			}
		})
		.fromTo('.hole-circle', {
			r: 0,
		}, {
			r: window.innerWidth,
			scrollTrigger: {
				pin: false,
				trigger: second,
				pinSpacing: false,
				scrub: true,
				start: 'top top',
				end: 'bottom-=50%',
			}
		})
		.fromTo('.hole-circle', {
			opacity: 1,
		}, {
			opacity: 0,
			scrollTrigger: {
				trigger: second,
				pinSpacing: true,
				scrub: true,
				start: (self) => self.previous().end,
				end: (self) => self.previous().end,
			}
		})
		.fromTo('.expanding-image', {
			scale: 1,
		}, {
			scale: 0.75,
			scrollTrigger: {
				pin: third,
				trigger: third,
				scrub: true,
				start: 'top bottom',
				end: 'bottom',
			}
		})
		.fromTo('.main-image', {
			opacity: 0,
			scale: 0,
			yPercent: (index) => {
				const position = index % 3

				if (index === 3) {
					return 0
				}

				if (index === 7) {
					return -75
				}

				if (index < 3) {
					if (position === 1) return -75
					if (position === 0) return 75

					return 0
				}

				if (position === 1) return 75
				if (position === 0) return -75
				return 75

			},
			xPercent: (index) => {
				const position = index % 3

				if (index === 3) {
					return -75
				}

				if (index === 7) {
					return 75
				}

				if (index < 3) {
					if (position === 1) return -75
					if (position === 0) return 0
					return 75
				}


				if (position === 1) return -75
				if (position === 0) return 0
				return 75
			},
		}, {
			opacity: 1,
			scale: 0.75,
			stagger: 0.2,
			scrollTrigger: {
				pin: '.fourth',
				trigger: '.fourth',
				scrub: true,
				start: 'top top',
				end: 'bottom-=50%',
			}
		})
		.fromTo('.bad-blob', {
			scale: 0,
		}, {
			scale: 2.5,
			stagger: 0.05,
			scrollTrigger: {
				pin: '.fifth',
				trigger: '.fifth',
				scrub: true,
				start: 'top top',
				end: 'bottom+=100%',
			}
		})
		.fromTo('.bad-blob-wrapper', {
			y: window.innerHeight,
			x: 'random(200, 800)'
		}, {
			y: 'random(200, 500)',
			stagger: 0.5,
			scrollTrigger: {
				trigger: '.fifth',
				scrub: true,
				start: 'top top',
				end: 'bottom+=100%',
			}
		})
		.fromTo('.expanding-image', {
			yPercent: 0,
		}, {
			yPercent: -110,
			scrollTrigger: {
				trigger: '.sixth',
				scrub: true,
				start: 'top bottom',
				end: 'bottom-=70%'
			}
		})
		.fromTo('.main-images', {
			yPercent: 0,
		}, {
			yPercent: -110,
			scrollTrigger: {
				trigger: '.sixth',
				scrub: true,
				start: 'top bottom',
				end: 'bottom-=70%',
			}
		})
		.fromTo(title, {
				'will-change': 'transform',
				xPercent: 30
			}, {
				ease: 'none',
				xPercent: -10,
				scrollTrigger: {
					trigger: '.seventh',
					// markers: true,
					scrub: true,
					start: 'top bottom',
					end: 'bottom-=50%',
				}
			})
			.fromTo(chars, {
				'will-change': 'opacity, transform', 
				transformOrigin: '50% 50% -50px',
				rotationZ: 0,
				rotationX: 0,
				opacity: 1,
			},
			{
				ease: 'expo.inOut',
				rotationZ: -120,
				rotationX: 120,
				opacity: 0,
				stagger: 0.0375,
				scrollTrigger: {
					trigger: '.seventh',
					markers: true,
					start: 'top bottom',
					end: 'bottom-=75%',
					scrub: true,
				}
      })
			.fromTo('.black-hole-circle', {
				r: 50,
			},
			{
				r: 200,
				scrollTrigger: {
					trigger: '.seventh',
					markers: true,
					start: 'top bottom',
					end: 'bottom-=75%',
					scrub: true,
				}
      })
			.fromTo('.black-hole-wrapper', {
				scale: 0,
				rotateY: 20,
				rotateX: 10,
				xPercent: 0
			},
			{
				scale: 1,
				rotateY: 90,
				rotateX: 40,
				xPercent: 20,
				scrollTrigger: {
					trigger: '.seventh',
					markers: true,
					start: 'top bottom',
					end: 'bottom-=75%',
					scrub: true,
				}
      })
		// .fromTo('.expanding-image', {
		// 	height: '100dvh',
		// 	scale: 1,
		// 	// y: window.innerHeight * -1.5,
		// 	// transformOrigin: 'center center'
		// }, {
		// 	height: window.innerHeight * 0.75,
		// 	scale: 0.5,
		// 	scrollTrigger: {
		// 		pin: second,
		// 		markers: true,
		// 		trigger: second,
		// 		scrub: true,
		// 		start: (self) => self.previous().end,
		// 		end: 'bottom',
		// 	}
		// })
		// .fromTo('.expanding-image', {
		// 	opacity: 1,
		// }, {
		// 	opacity: 0,
		// 	scrollTrigger: {
		// 		markers: true,
		// 		trigger: third,
		// 		scrub: true,
		// 		start: (self) => self.previous().end,
		// 		end: (self) => self.previous().end,
		// 	}
		// })
		// .fromTo('.main-image', {
		// 	opacity: 0,
		// 	scale: 0
		// }, {
		// 	opacity: 1,
		// 	scale: 0.5,
		// 	scrollTrigger: {
		// 		// markers: true,
		// 		pin: third,
		// 		pinSpacing: true,
		// 		trigger: third,
		// 		scrub: true,
		// 		start: 'top top',
		// 		end: 'bottom-=50%'
		// 	}
		// })
		// .fromTo('.top-images', {
		// 	opacity: 0,
		// }, {
		// 	opacity: 1,
		// 	scrollTrigger: {
		// 		trigger: third,
		// 		scrub: true,
		// 		start: (self) => self.previous().end,
		// 		end: 'bottom+=100%',
		// 	}
		// })
		// .fromTo('.bottom-images', {
		// 	opacity: 0,
		// }, {
		// 	opacity: 1,
		// 	scrollTrigger: {
		// 		trigger: third,
		// 		scrub: true,
		// 		start: (self) => self.previous().end,
		// 		end: 'bottom+=100%',
		// 	}
		// })

	// const sections = document.querySelectorAll('section')
	// const act1Title = document.querySelector('.act-1-title')
	// const act1TitleChars = act1Title?.querySelectorAll('.char')
	
	// act1TitleChars?.forEach(char => gsap.set(char.parentNode, { perspective: 500 }));

	// const sectionContent = document.querySelectorAll('.content')

	// document.addEventListener('pointermove', handleContentTilting)

	// function handleContentTilting(e: PointerEvent) {
	// 	const { clientX, clientY } = e
	// 	const centerX = window.innerWidth / 2
	// 	const centerY = window.innerHeight / 2

	// 	sectionContent.forEach((content) => {
	// 		const rect = content.getBoundingClientRect()
	// 		const cardX = rect.left + rect.width / 2
	// 		const cardY = rect.top + rect.height / 2
	// 		const dx = clientX - cardX
	// 		const dy = clientY - cardY
	// 		const tiltX = -(dy / centerY)
	// 		const tiltY = (dx / centerX)

	// 		gsap.to(content, {
	// 			rotateX: tiltX,
	// 			rotateY: tiltY,
	// 			x: tiltY,
	// 			y: tiltX,
	// 			ease: 'power2.out'
	// 		})
	// 	})
	// }

	// sections.forEach((section, index, sectionsArray) => {
		// position sections in random order in a 9 point grid based in window size
		// each grid cell is the full width and height of the window
		// 1 2 3
		// 4 5 6
		// 7 8 9
		// data-attributes to determine order in the grid
		// e.g. if first section is 5, it will be in the middle
		// if second section is 1, it will be in the top left corner
		// check where the next section is positioned in relation to the current/previous one
		// e.g. if current section is 5 and next section is 1, it will be in the top left corner
		// if current section is 5 and next section is 6, it will be in the middle right
		// get the direction of the next section in relation to the current one

		// const cell = parseInt(section.dataset.cell)
		// const nextCell = parseInt(sectionsArray[index + 1]?.dataset.cell)
		// // get the direction of the next section in relation to the current one
		// // should be one of the following: down, up, left, right, down-left, down-right, up-left, up-right
		// const nextDirection = getNextDirection(cell, nextCell)
		// const nextCellElement = sectionsArray[index + 1]
		// console.log('nextDirection', cell, nextDirection)
		

		// if (index === 0) {
		// 	timeline
		// 	.fromTo(act1TitleChars, {
		// 		'will-change': 'opacity transform filter',
		// 		opacity: 0,
		// 		filter: 'blur(15px)',
		// 		yPercent: 50
		// 	}, {
		// 		opacity: 1,
		// 		filter: 'blur(0px)',
		// 		yPercent: 0,
		// 		stagger: 0.05,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: window.innerHeight / 3,
		// 			end: window.innerHeight + 600,
		// 		}
		// 	})
		// 	.fromTo(section, {
		// 		'will-change': 'transform opacity',
		// 		y: 0,
		// 	}, {
		// 		ease: 'none',
		// 		y: -window.innerHeight,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: (self) => self.previous().end,
		// 			end: (self) => {
		// 				return self.previous().end + section.clientHeight 
		// 			},
		// 		}
		// 	})
			// .fromTo(section, {
			// 	'will-change': 'transform opacity',
			// 	opacity: 1,
			// 	rotateX: -30,
			// }, {
			// 	ease: 'none',
			// 	opacity: 1,
			// 	rotateX: 0,
			// 	scrollTrigger: {
			// 		scrub: true,
			// 		start: 100,
			// 		end: window.innerHeight + 100,
			// 	}
			// }, '<')

			// .fromTo(section, {
			// 	'will-change': 'transform opacity',
			// 	y: -window.innerHeight,
			// }, {
			// 	ease: 'none',
			// 	y: -window.innerHeight * 2,
			// 	scrollTrigger: {
			// 		scrub: true,
			// 		start: (self) => window.innerHeight * 2 + 100,
			// 		end: (window.innerHeight + 100)  * 3,
			// 	}
			// })
		// }

		
		// if (nextDirection === 'up') {
		// 	timeline.fromTo(section, {
		// 		'will-change': 'scale opacity transform',
		// 		scale: 1,
		// 		opacity: 1,
		// 		rotateX: 0,
		// 		yPercent: 0,
		// 	}, {
		// 		ease: 'none',
		// 		scale: 2,
		// 		opacity: 0,
		// 		rotateX: 90,
		// 		yPercent: -20,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 			end: '+=100%',
		// 		}
		// 	}, '<')
		// 	.fromTo(nextCellElement, {
		// 		'will-change': 'scale opacity transform',
		// 		scale: 0,
		// 		opacity: 0,
		// 		rotateX: 90,
		// 		yPercent: -20,
		// 	}, {
		// 		ease: 'none',
		// 		scale: 1,
		// 		opacity: 1,
		// 		rotateX: 0,
		// 		yPercent: 0,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 			end: '+=100%',
		// 		}
		// 	}, '<')
		// }

		// if (nextDirection === 'up-right') {
		// 	timeline.fromTo(section, {
		// 		'will-change': 'transform scale opacity',
		// 		xPercent: 0,
		// 		yPercent: 0,
		// 		rotateX: 0,
		// 		rotateY: 0,
		// 		rotateZ: 0,
		// 		opacity: 1
		// 	}, {
		// 		ease: 'none',
		// 		xPercent: -100,
		// 		yPercent: 100,
		// 		rotateX: 90,
		// 		rotateY: 120,
		// 		rotateZ: -45,
		// 		opacity: 0,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 			end: '+=100%',
		// 		}
		// 	}, '<')
		// 	.fromTo(nextCellElement, {
		// 		'will-change': 'transform scale opacity',
		// 		xPercent: 100,
		// 		opacity: 0,
		// 		scale: 0.5,
		// 		yPercent: -100,
		// 		rotateX: -90,
		// 		rotateY: -120,
		// 		rotateZ: 45,
		// 	}, {
		// 		ease: 'none',
		// 		xPercent: 0,
		// 		yPercent: 0,
		// 		rotateX: 0,
		// 		rotateY: 0,
		// 		rotateZ: 0,
		// 		scale: 1,
		// 		opacity: 1,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 			end: '+=100%',
		// 		}
		// 	}, '<')
		// }

		// if (nextDirection === 'up-left') {
		// 	timeline
		// 	.fromTo(section, {
		// 		'will-change': 'transform scale opacity',
		// 		xPercent: 0,
		// 		yPercent: 0,
		// 		rotateX: 0,
		// 		rotateY: 0,
		// 		rotateZ: 0,
		// 		opacity: 1
		// 	}, {
		// 		ease: 'none',
		// 		xPercent: 100,
		// 		yPercent: 100,
		// 		rotateX: 90,
		// 		rotateY: -120,
		// 		rotateZ: 45,
		// 		opacity: 0,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 			end: '+=100%',
		// 		}
		// 	}, '<')
		// 	.fromTo(nextCellElement, {
		// 		'will-change': 'transform scale opacity',
		// 		xPercent: -100,
		// 		opacity: 0,
		// 		scale: 0.5,
		// 		yPercent: -100,
		// 		rotateX: -90,
		// 		rotateY: 120,
		// 		rotateZ: -45,
		// 	}, {
		// 		ease: 'none',
		// 		xPercent: 0,
		// 		yPercent: 0,
		// 		rotateX: 0,
		// 		rotateY: 0,
		// 		rotateZ: 0,
		// 		scale: 1,
		// 		opacity: 1,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 			end: '+=100%'
		// 		}
		// 	}, '<')
		// }

		// if (nextDirection === 'down') {
		// 	timeline.fromTo(section, {
		// 			'will-change': 'transform opacity',
		// 			yPercent: 0,
		// 			opacity: 1
		// 		}, {
		// 			ease: 'none',
		// 			yPercent: -100,
		// 			opacity: 0,
		// 			scrollTrigger: {
		// 				scrub: true,
		// 				start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 				end: '+=100%',
		// 			}
		// 		}, '<')
		// 		.fromTo(nextCellElement, {
		// 			'will-change': 'transform opacity',
		// 			yPercent: 100,
		// 			opacity: 0,
		// 		}, {
		// 			ease: 'none',
		// 			yPercent: 0,
		// 			opacity: 1,
		// 			scrollTrigger: {
		// 				scrub: true,
		// 				start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 				end: '+=100%',
		// 			}
		// 		}, '<')
		// }

		// if (nextDirection === 'down-right') {
		// 	timeline.fromTo(section, {
		// 		'will-change': 'transform opacity',
		// 		xPercent: 0,
		// 		yPercent: 0,
		// 		opacity: 1,
		// 		rotateX: 0,
		// 		rotateY: 0,
		// 		rotateZ: 0,
		// 	}, {
		// 		ease: 'none',
		// 		xPercent: -100,
		// 		opacity: 0,
		// 		yPercent: -100,
		// 		rotateX: -90,
		// 		rotateY: 120,
		// 		rotateZ: -45,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 			end: '+=100%',
		// 		}
		// 	}, '<')
		// 	.fromTo(nextCellElement, {
		// 		'will-change': 'transform opacity',
		// 		xPercent: 100,
		// 		opacity: 0,
		// 		yPercent: 100,
		// 		rotateX: 90,
		// 		rotateY: -120,
		// 		rotateZ: 45,
		// 	}, {
		// 		ease: 'none',
		// 		xPercent: 0,
		// 		opacity: 1,
		// 		yPercent: 0,
		// 		rotateX: 0,
		// 		rotateY: 0,
		// 		rotateZ: 0,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 			end: '+=100%'
		// 		}
		// 	}, '<')
		// }

		// if (nextDirection === 'down-left') {
		// 	timeline.fromTo(section, {
		// 		'will-change': 'transform opacity',
		// 		xPercent: 0,
		// 		yPercent: 0,
		// 		opacity: 1,
		// 		rotateX: 0,
		// 		rotateY: 0,
		// 		rotateZ: 0,
		// 	}, {
		// 		ease: 'none',
		// 		xPercent: 100,
		// 		opacity: 0,
		// 		yPercent: -100,
		// 		rotateX: 90,
		// 		rotateY: 120,
		// 		rotateZ: 45,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 			end: '+=100%',
		// 		}
		// 	}, '<')
		// 	.fromTo(nextCellElement, {
		// 		'will-change': 'transform opacity',
		// 		xPercent: -100,
		// 		opacity: 0,
		// 		yPercent: 100,
		// 		rotateX: 90,
		// 		rotateY: 120,
		// 		rotateZ: -45,
		// 	}, {
		// 		ease: 'none',
		// 		xPercent: 0,
		// 		opacity: 1,
		// 		yPercent: 0,
		// 		rotateX: 0,
		// 		rotateY: 0,
		// 		rotateZ: 0,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 			end: '+=100%',
		// 		}
		// 	}, '<')
		// }

		// if (nextDirection === 'left') {
		// 	timeline.fromTo(section, {
		// 		'will-change': 'transform opacity',
		// 		xPercent: 0,
		// 		rotateY: 0,
		// 		opacity: 1
		// 	}, {
		// 		ease: 'none',
		// 		xPercent: 100,
		// 		opacity: 0,
		// 		rotateY: 120,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 			end: '+=100%',
		// 		}
		// 	}, '<')
		// 	.fromTo(nextCellElement, {
		// 		'will-change': 'transform opacity',
		// 		xPercent: -100,
		// 		rotateY: -120,
		// 		opacity: 0,
		// 	}, {
		// 		ease: 'none',
		// 		xPercent: 0,
		// 		opacity: 1,
		// 		rotateY: 0,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 			end: '+=100%',
		// 		}
		// 	}, '<')
		// }

		// if (nextDirection === 'right') {
		// 	timeline.fromTo(section, {
		// 		'will-change': 'transform opacity',
		// 		xPercent: 0,
		// 		rotateY: 0,
		// 		opacity: 1
		// 	}, {
		// 		ease: 'none',
		// 		xPercent: -100,
		// 		opacity: 0,
		// 		rotateY: -120,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 			end: '+=100%',
		// 		}
		// 	}, '<')
		// 	.fromTo(nextCellElement, {
		// 		'will-change': 'transform opacity',
		// 		xPercent: 100,
		// 		opacity: 0,
		// 		rotateY: 120,
		// 	}, {
		// 		ease: 'none',
		// 		xPercent: 0,
		// 		opacity: 1,
		// 		rotateY: 0,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 			end: '+=100%',
		// 		}
		// 	}, '<')
		// }

		// if (index === 0) return
		// gsap.set(section, { perspective: 500, opacity: 0 })
	// })

	function getNextDirection (current: number, next: number) {
		const grid = 3
		const x = current % grid
		const y = Math.floor(current / grid)
		const nextX = next % grid
		const nextY = Math.floor(next / grid)

		if (nextX > x && nextY === y) {
			return 'right'
		} else if (nextX < x && nextY === y) {
			return 'left'
		} else if (nextY > y && nextX === x) {
			return 'down'
		} else if (nextY < y && nextX === x) {
			return 'up'
		} else if (nextX > x && nextY > y) {
			return 'down-left'
		} else if (nextX < x && nextY > y) {
			return 'down-right'
		} else if (nextX > x && nextY < y) {
			return 'up-left'
		} else if (nextX < x && nextY < y) {
			return 'up-right'
		}
	}
</script>