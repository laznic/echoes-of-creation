---
import Layout from "../layouts/Layout.astro";

import "splitting/dist/splitting.css";
import "splitting/dist/splitting-cells.css";

const gridOrder = [1, 2, 3, 4, 5, 6, 7, 8, 9]
const shuffled = [...gridOrder]
shuffle(shuffled)

function shuffle(array: number[]) {
  let currentIndex = array.length;

  // While there remain elements to shuffle...
  while (currentIndex != 0) {

    // Pick a remaining element...
    let randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex--;

    // And swap it with the current element.
    [array[currentIndex], array[randomIndex]] = [
      array[randomIndex], array[currentIndex]];
  }
}

---
<Layout title="Home">
	<main>
		<header>
			<h1 class="text-2xl">Identity Crisis</h1>
			<p>By Niklas Lepist√∂ & Jani Reijonen</p>
			
			<button>Toggle sound</button>
			<button>Autoplay with narration</button>
		</header>
		
		<div id="main-grid" class="w-[100vw] h-[2000dvh]">
			<section data-cell={shuffled[0]} id="section-1"  class="opacity-0 fixed top-0 flex items-center justify-center gap-8 h-[100dvh] w-[100vw] p-24">
				<h2 class="font-black text-3xl">{shuffled[0]}</h2>
				<p class="text-md">
					Lorem ipsum dolor sit amet consectetur adipisicing elit. Pariatur, alias odit eligendi, tempora magni animi, aspernatur dolorum sint laboriosam illo ipsam rerum ducimus reiciendis aut ullam voluptatum deleniti praesentium repudiandae.
				</p>
				<img src="https://picsum.photos/320/320" alt="Identity Crisis 1">
			</section>

			<section data-cell={shuffled[1]} id="section-2"  class="opacity-0 fixed top-0 flex items-center justify-center gap-8 h-[100dvh] w-[100vw] p-24">
				<h2 class="font-black text-3xl">{shuffled[1]}</h2>
				<img src="https://picsum.photos/320/320" alt="Identity Crisis 1">
				<p class="text-md">
					Lorem ipsum dolor sit amet consectetur adipisicing elit. Pariatur, alias odit eligendi, tempora magni animi, aspernatur dolorum sint laboriosam illo ipsam rerum ducimus reiciendis aut ullam voluptatum deleniti praesentium repudiandae.
				</p>
			</section>

			<section data-cell={shuffled[2]} id="section-3"  class="opacity-0 fixed top-0 flex items-center justify-center gap-8 h-[100dvh] w-[100vw] p-24">
				<h2 class="font-black text-3xl">{shuffled[2]}</h2>
				<p class="text-md">
					Lorem ipsum dolor sit amet consectetur adipisicing elit. Pariatur, alias odit eligendi, tempora magni animi, aspernatur dolorum sint laboriosam illo ipsam rerum ducimus reiciendis aut ullam voluptatum deleniti praesentium repudiandae.
				</p>
				<img src="https://picsum.photos/320/320" alt="Identity Crisis 1">
			</section>

			<section data-cell={shuffled[3]} id="section-4"  class="opacity-0 fixed top-0 flex items-center justify-center gap-8 h-[100dvh] w-[100vw] p-24">
				<h2 class="font-black text-3xl">{shuffled[3]}</h2>
				<img src="https://picsum.photos/320/320" alt="Identity Crisis 1">
				<p class="text-md">
					Lorem ipsum dolor sit amet consectetur adipisicing elit. Pariatur, alias odit eligendi, tempora magni animi, aspernatur dolorum sint laboriosam illo ipsam rerum ducimus reiciendis aut ullam voluptatum deleniti praesentium repudiandae.
				</p>
			</section>

			<section data-cell={shuffled[4]} id="section-5"  class="opacity-0 fixed top-0 flex items-center justify-center gap-8 h-[100dvh] w-[100vw] p-24">
				<h2 class="font-black text-3xl">{shuffled[4]}</h2>
				<p class="text-md">
					Lorem ipsum dolor sit amet consectetur adipisicing elit. Pariatur, alias odit eligendi, tempora magni animi, aspernatur dolorum sint laboriosam illo ipsam rerum ducimus reiciendis aut ullam voluptatum deleniti praesentium repudiandae.
				</p>
				<img src="https://picsum.photos/320/320" alt="Identity Crisis 1">
			</section>

			<section data-cell={shuffled[5]} id="section-6"  class="opacity-0 fixed top-0 flex items-center justify-center gap-8 h-[100dvh] w-[100vw] p-24">
				<h2 class="font-black text-3xl">{shuffled[5]}</h2>
				<img src="https://picsum.photos/320/320" alt="Identity Crisis 1">
				<p class="text-md">
					Lorem ipsum dolor sit amet consectetur adipisicing elit. Pariatur, alias odit eligendi, tempora magni animi, aspernatur dolorum sint laboriosam illo ipsam rerum ducimus reiciendis aut ullam voluptatum deleniti praesentium repudiandae.
				</p>
			</section>

			<section data-cell={shuffled[6]} id="section-7"  class="opacity-0 fixed top-0 flex items-center justify-center gap-8 h-[100dvh] w-[100vw] p-24">
				<h2 class="font-black text-3xl">{shuffled[6]}</h2>
				<p class="text-md">
					Lorem ipsum dolor sit amet consectetur adipisicing elit. Pariatur, alias odit eligendi, tempora magni animi, aspernatur dolorum sint laboriosam illo ipsam rerum ducimus reiciendis aut ullam voluptatum deleniti praesentium repudiandae.
				</p>
				<img src="https://picsum.photos/320/320" alt="Identity Crisis 1">
			</section>

			<section data-cell={shuffled[7]} id="section-8"  class="opacity-0 fixed top-0 flex items-center justify-center gap-8 h-[100dvh] w-[100vw] p-24">
				<h2 class="font-black text-3xl">{shuffled[7]}</h2>
				<img src="https://picsum.photos/320/320" alt="Identity Crisis 1">
				<p class="text-md">
					Lorem ipsum dolor sit amet consectetur adipisicing elit. Pariatur, alias odit eligendi, tempora magni animi, aspernatur dolorum sint laboriosam illo ipsam rerum ducimus reiciendis aut ullam voluptatum deleniti praesentium repudiandae.
				</p>
			</section>

			<section data-cell={shuffled[8]} id="section-9"  class="opacity-0 fixed top-0 flex items-center justify-center gap-8 h-[100dvh] w-[100vw] p-24">
				<h2 class="font-black text-3xl">{shuffled[8]}</h2>
				<p class="text-md">
					Lorem ipsum dolor sit amet consectetur adipisicing elit. Pariatur, alias odit eligendi, tempora magni animi, aspernatur dolorum sint laboriosam illo ipsam rerum ducimus reiciendis aut ullam voluptatum deleniti praesentium repudiandae.
				</p>
				<img src="https://picsum.photos/320/320" alt="Identity Crisis 1">
			</section>
		</div>
	</main>
</Layout>

<style>
	.glow {
		width: 480px;
		height: 480px;
		background: green;
		border-radius: 50%;
		position: absolute;
		top: 0;
		left: 0;
		mix-blend-mode: difference;
	}

</style>

<script>
	import Lenis from '@studio-freight/lenis'
	import gsap from 'gsap'
	import ScrollTrigger from 'gsap/ScrollTrigger'
	import Splitting from 'splitting'

	Splitting()

	const lenis = new Lenis()

	lenis.on('scroll', ScrollTrigger.update)

	gsap.ticker.add((time) => {
		lenis.raf(time * 1000)
	})

	gsap.ticker.lagSmoothing(0)
	gsap.registerPlugin(ScrollTrigger)

	// const title = document.querySelector('h2')
	// const chars = title.querySelectorAll('.char')
			
	// chars.forEach(char => gsap.set(char.parentNode, { perspective: 500 })); 

	const timeline = gsap.timeline().pause()
	const sections = document.querySelectorAll('section')

	sections.forEach((section, index, sectionsArray) => {
		// position sections in random order in a 9 point grid based in window size
		// each grid cell is the full width and height of the window
		// 1 2 3
		// 4 5 6
		// 7 8 9
		// data-attributes to determine order in the grid
		// e.g. if first section is 5, it will be in the middle
		// if second section is 1, it will be in the top left corner
		// check where the next section is positioned in relation to the current/previous one
		// e.g. if current section is 5 and next section is 1, it will be in the top left corner
		// if current section is 5 and next section is 6, it will be in the middle right
		// get the direction of the next section in relation to the current one

		const cell = parseInt(section.dataset.cell)
		const nextCell = parseInt(sectionsArray[index + 1]?.dataset.cell)
		// get the direction of the next section in relation to the current one
		// should be one of the following: down, up, left, right, down-left, down-right, up-left, up-right
		const nextDirection = getNextDirection(cell, nextCell)
		const nextCellElement = sectionsArray[index + 1]
		console.log('nextDirection', cell, nextDirection)

		if (index === 0) {
			timeline.fromTo(section, {
				'will-change': 'transform opacity',
				opacity: 0,
				rotateX: -30,
			}, {
				ease: 'none',
				opacity: 1,
				rotateX: 0,
				scrollTrigger: {
					scrub: true,
					start: 0,
					end: window.innerHeight,
				}
			})
		}

		if (nextDirection === 'up-right') {
			timeline.fromTo(section, {
				'will-change': 'transform scale opacity',
				xPercent: 0,
				yPercent: 0,
				rotateX: 0,
				rotateY: 0,
				rotateZ: 0,
				opacity: 1
			}, {
				ease: 'none',
				xPercent: -100,
				yPercent: 100,
				rotateX: 90,
				rotateY: 120,
				rotateZ: -45,
				opacity: 0,
				scrollTrigger: {
					scrub: true,
					start: (self) => self.previous().end,
					end: '+=100%',
				}
			})
			.fromTo(nextCellElement, {
				'will-change': 'transform scale opacity',
				xPercent: 100,
				opacity: 0,
				scale: 0.5,
				yPercent: -100,
				rotateX: -90,
				rotateY: -120,
				rotateZ: -45,
			}, {
				ease: 'none',
				xPercent: 0,
				yPercent: 0,
				rotateX: 0,
				rotateY: 0,
				rotateZ: 0,
				scale: 1,
				opacity: 1,
				scrollTrigger: {
					scrub: true,
					start: (self) => self.previous().end,
					end: '+=100%',
				}
			})
		}

		if (nextDirection === 'up-left') {
			timeline.fromTo(section, {
				'will-change': 'transform scale opacity',
				xPercent: 0,
				yPercent: 0,
				rotateX: 0,
				rotateY: 0,
				rotateZ: 0,
				opacity: 1
			}, {
				ease: 'none',
				xPercent: 100,
				yPercent: 100,
				rotateX: 90,
				rotateY: -120,
				rotateZ: 45,
				opacity: 0,
				scrollTrigger: {
					scrub: true,
					start: (self) => self.previous().end,
					end: '+=100%',
				}
			})
			.fromTo(nextCellElement, {
				'will-change': 'transform scale opacity',
				xPercent: -100,
				opacity: 0,
				scale: 0.5,
				yPercent: -100,
				rotateX: -90,
				rotateY: 120,
				rotateZ: -45,
			}, {
				ease: 'none',
				xPercent: 0,
				yPercent: 0,
				rotateX: 0,
				rotateY: 0,
				rotateZ: 0,
				scale: 1,
				opacity: 1,
				scrollTrigger: {
					scrub: true,
					start: (self) => self.previous().end,
					end: '+=100%',
				}
			})
		}

		if (nextDirection === 'down') {
			timeline.fromTo(section, {
					'will-change': 'transform opacity',
					yPercent: 0,
					opacity: 1
				}, {
					ease: 'none',
					yPercent: -100,
					opacity: 0,
					scrollTrigger: {
						scrub: true,
						start: (self) => self.previous().end,
						end: '+=100%',
					}
				})
				.fromTo(nextCellElement, {
					'will-change': 'transform opacity',
					yPercent: 100,
					opacity: 0,
				}, {
					ease: 'none',
					yPercent: 0,
					opacity: 1,
					scrollTrigger: {
						scrub: true,
						start: (self) => self.previous().end,
						end: '+=100%',
					}
				})
		}

		if (nextDirection === 'down-right') {
			timeline.fromTo(section, {
				'will-change': 'transform opacity',
				xPercent: 0,
				yPercent: 0,
				opacity: 1,
				rotateX: 0,
				rotateY: 0,
				rotateZ: 0,
			}, {
				ease: 'none',
				xPercent: -100,
				opacity: 0,
				yPercent: -100,
				rotateX: -90,
				rotateY: 120,
				rotateZ: -45,
				scrollTrigger: {
					scrub: true,
					start: (self) => self.previous().end,
					end: '+=100%',
				}
			})
			.fromTo(nextCellElement, {
				'will-change': 'transform opacity',
				xPercent: 100,
				opacity: 0,
				yPercent: 100,
				rotateX: 90,
				rotateY: -120,
				rotateZ: 45,
			}, {
				ease: 'none',
				xPercent: 0,
				opacity: 1,
				yPercent: 0,
				rotateX: 0,
				rotateY: 0,
				rotateZ: 0,
				scrollTrigger: {
					scrub: true,
					start: (self) => self.previous().end,
					end: '+=100%',
				}
			})
		}

		if (nextDirection === 'down-left') {
			timeline.fromTo(section, {
				'will-change': 'transform opacity',
				xPercent: 0,
				yPercent: 0,
				opacity: 1,
				rotateX: 0,
				rotateY: 0,
				rotateZ: 0,
			}, {
				ease: 'none',
				xPercent: 100,
				opacity: 0,
				yPercent: -100,
				rotateX: 90,
				rotateY: 120,
				rotateZ: 45,
				scrollTrigger: {
					scrub: true,
					start: (self) => self.previous().end,
					end: '+=100%',
				}
			})
			.fromTo(nextCellElement, {
				'will-change': 'transform opacity',
				xPercent: -100,
				opacity: 0,
				yPercent: 100,
				rotateX: 90,
				rotateY: 120,
				rotateZ: -45,
			}, {
				ease: 'none',
				xPercent: 0,
				opacity: 1,
				yPercent: 0,
				rotateX: 0,
				rotateY: 0,
				rotateZ: 0,
				scrollTrigger: {
					scrub: true,
					start: (self) => self.previous().end,
					end: '+=100%',
				}
			})
		}

		if (nextDirection === 'left') {
			timeline.fromTo(section, {
				'will-change': 'transform opacity',
				xPercent: 0,
				opacity: 1
			}, {
				ease: 'none',
				xPercent: 100,
				opacity: 0,
				scrollTrigger: {
					scrub: true,
					start: (self) => self.previous().end,
					end: '+=100%',
				}
			})
			.fromTo(nextCellElement, {
				'will-change': 'transform opacity',
				xPercent: -100,
				opacity: 0,
			}, {
				ease: 'none',
				xPercent: 0,
				opacity: 1,
				scrollTrigger: {
					scrub: true,
					start: (self) => self.previous().end,
					end: '+=100%',
				}
			})
		}

		if (nextDirection === 'right') {
			timeline.fromTo(section, {
				'will-change': 'transform opacity',
				xPercent: 0,
				opacity: 1
			}, {
				ease: 'none',
				xPercent: -100,
				opacity: 0,
				scrollTrigger: {
					scrub: true,
					start: (self) => self.previous().end,
					end: '+=100%',
				}
			})
			.fromTo(nextCellElement, {
				'will-change': 'transform opacity',
				xPercent: 100,
				opacity: 0,
			}, {
				ease: 'none',
				xPercent: 0,
				opacity: 1,
				scrollTrigger: {
					scrub: true,
					start: (self) => self.previous().end,
					end: '+=100%',
				}
			})
		}

		if (nextDirection === 'up') {
			timeline.fromTo(section, {
				'will-change': 'scale opacity',
				scale: 1,
				opacity: 1
			}, {
				ease: 'none',
				scale: 1.5,
				opacity: 0,
				scrollTrigger: {
					scrub: true,
					start: (self) => self.previous().end,
					end: '+=100%',
				}
			})
			.fromTo(nextCellElement, {
				'will-change': 'scale opacity',
				scale: 0,
				opacity: 0,
			}, {
				ease: 'none',
				scale: 1,
				opacity: 1,
				scrollTrigger: {
					scrub: true,
					start: (self) => self.previous().end,
					end: '+=100%',
				}
			})
		}

		gsap.set(section, { perspective: 500, opacity: 0 })
	})

	function getNextDirection (current: number, next: number) {
		const grid = 3
		const x = current % grid
		const y = Math.floor(current / grid)
		const nextX = next % grid
		const nextY = Math.floor(next / grid)

		if (nextX > x && nextY === y) {
			return 'right'
		} else if (nextX < x && nextY === y) {
			return 'left'
		} else if (nextY > y && nextX === x) {
			return 'down'
		} else if (nextY < y && nextX === x) {
			return 'up'
		} else if (nextX > x && nextY > y) {
			return 'down-left'
		} else if (nextX < x && nextY > y) {
			return 'down-right'
		} else if (nextX > x && nextY < y) {
			return 'up-left'
		} else if (nextX < x && nextY < y) {
			return 'up-right'
		}
	}
</script>