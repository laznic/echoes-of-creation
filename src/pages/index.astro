---
import Layout from "../layouts/Layout.astro";

import "splitting/dist/splitting.css";
import "splitting/dist/splitting-cells.css";

---
<Layout title="Home">
	<main>
		<header>
			<h1 class="text-2xl">Identity Crisis</h1>
			<p>By Niklas Lepistö & Jani Reijonen</p>
			
			<button>Toggle sound</button>
			<button>Autoplay with narration</button>
		</header>
		
		<section data-cell="5" id="section-1"  class="border border-red-500 flex items-center justify-center gap-8 h-[100dvh]">
			<p class="text-md">
				Lorem ipsum dolor sit amet consectetur adipisicing elit. Pariatur, alias odit eligendi, tempora magni animi, aspernatur dolorum sint laboriosam illo ipsam rerum ducimus reiciendis aut ullam voluptatum deleniti praesentium repudiandae.
			</p>
			<img src="https://picsum.photos/320/320" alt="Identity Crisis 1">
		</section>

		<section data-cell="8" id="section-2"  class="border border-red-500 flex items-center justify-center gap-8 h-[100dvh]">
			<img src="https://picsum.photos/320/320" alt="Identity Crisis 1">
			<p class="text-md">
				Lorem ipsum dolor sit amet consectetur adipisicing elit. Pariatur, alias odit eligendi, tempora magni animi, aspernatur dolorum sint laboriosam illo ipsam rerum ducimus reiciendis aut ullam voluptatum deleniti praesentium repudiandae.
			</p>
		</section>

		<section data-cell="3" id="section-3"  class="border border-red-500 flex items-center justify-center gap-8 h-[100dvh]">
			<p class="text-md">
				Lorem ipsum dolor sit amet consectetur adipisicing elit. Pariatur, alias odit eligendi, tempora magni animi, aspernatur dolorum sint laboriosam illo ipsam rerum ducimus reiciendis aut ullam voluptatum deleniti praesentium repudiandae.
			</p>
			<img src="https://picsum.photos/320/320" alt="Identity Crisis 1">
		</section>

		<section data-cell="1" id="section-4"  class="border border-red-500 flex items-center justify-center gap-8 h-[100dvh]">
			<img src="https://picsum.photos/320/320" alt="Identity Crisis 1">
			<p class="text-md">
				Lorem ipsum dolor sit amet consectetur adipisicing elit. Pariatur, alias odit eligendi, tempora magni animi, aspernatur dolorum sint laboriosam illo ipsam rerum ducimus reiciendis aut ullam voluptatum deleniti praesentium repudiandae.
			</p>
		</section>

		<section data-cell="4" id="section-5"  class="border border-red-500 flex items-center justify-center gap-8 h-[100dvh]">
			<p class="text-md">
				Lorem ipsum dolor sit amet consectetur adipisicing elit. Pariatur, alias odit eligendi, tempora magni animi, aspernatur dolorum sint laboriosam illo ipsam rerum ducimus reiciendis aut ullam voluptatum deleniti praesentium repudiandae.
			</p>
			<img src="https://picsum.photos/320/320" alt="Identity Crisis 1">
		</section>

		<section data-cell="7" id="section-6"  class="border border-red-500 flex items-center justify-center gap-8 h-[100dvh]">
			<img src="https://picsum.photos/320/320" alt="Identity Crisis 1">
			<p class="text-md">
				Lorem ipsum dolor sit amet consectetur adipisicing elit. Pariatur, alias odit eligendi, tempora magni animi, aspernatur dolorum sint laboriosam illo ipsam rerum ducimus reiciendis aut ullam voluptatum deleniti praesentium repudiandae.
			</p>
		</section>

		<section data-cell="2" id="section-7"  class="border border-red-500 flex items-center justify-center gap-8 h-[100dvh]">
			<p class="text-md">
				Lorem ipsum dolor sit amet consectetur adipisicing elit. Pariatur, alias odit eligendi, tempora magni animi, aspernatur dolorum sint laboriosam illo ipsam rerum ducimus reiciendis aut ullam voluptatum deleniti praesentium repudiandae.
			</p>
			<img src="https://picsum.photos/320/320" alt="Identity Crisis 1">
		</section>

		<section data-cell="6" id="section-8"  class="border border-red-500 flex items-center justify-center gap-8 h-[100dvh]">
			<img src="https://picsum.photos/320/320" alt="Identity Crisis 1">
			<p class="text-md">
				Lorem ipsum dolor sit amet consectetur adipisicing elit. Pariatur, alias odit eligendi, tempora magni animi, aspernatur dolorum sint laboriosam illo ipsam rerum ducimus reiciendis aut ullam voluptatum deleniti praesentium repudiandae.
			</p>
		</section>

		<section data-cell="9" id="section-9"  class="border border-red-500 flex items-center justify-center gap-8 h-[100dvh]">
			<p class="text-md">
				Lorem ipsum dolor sit amet consectetur adipisicing elit. Pariatur, alias odit eligendi, tempora magni animi, aspernatur dolorum sint laboriosam illo ipsam rerum ducimus reiciendis aut ullam voluptatum deleniti praesentium repudiandae.
			</p>
			<img src="https://picsum.photos/320/320" alt="Identity Crisis 1">
		</section>
	</main>
</Layout>

<style>
	.glow {
		width: 480px;
		height: 480px;
		background: green;
		border-radius: 50%;
		position: absolute;
		top: 0;
		left: 0;
		mix-blend-mode: difference;
	}

</style>

<script>
	import Lenis from '@studio-freight/lenis'
	import gsap from 'gsap'
	import ScrollTrigger from 'gsap/ScrollTrigger'
	import Splitting from 'splitting'

	Splitting()

	const lenis = new Lenis()

	lenis.on('scroll', ScrollTrigger.update)

	gsap.ticker.add((time) => {
		lenis.raf(time * 1000)
	})

	gsap.ticker.lagSmoothing(0)
	gsap.registerPlugin(ScrollTrigger)

	// const title = document.querySelector('h2')
	// const chars = title.querySelectorAll('.char')
			
	// chars.forEach(char => gsap.set(char.parentNode, { perspective: 500 })); 

	const timeline = gsap.timeline()
	const sections = document.querySelectorAll('section')

	sections.forEach((section, index, sectionsArray) => {
		gsap.set(section, { perspective: 1000 })
		// position sections in random order in a 9 point grid based in window size
		// each grid cell is the full width and height of the window
		// 1 2 3
		// 4 5 6
		// 7 8 9
		// data-attributes to determine order in the grid
		// e.g. if first section is 5, it will be in the middle
		// if second section is 1, it will be in the top left corner
		// check where the next section is positioned in relation to the current/previous one
		// e.g. if current section is 5 and next section is 1, it will be in the top left corner
		// if current section is 5 and next section is 6, it will be in the middle right
		// get the direction of the next section in relation to the current one

		const cell = parseInt(section.dataset.cell)
		const nextCell = parseInt(sectionsArray[index + 1]?.dataset.cell)
		// get the direction of the next section in relation to the current one
		// should be one of the following: down, up, left, right, down-left, down-right, up-left, up-right

		function getNextDirection (current: number, next: number) {
			const grid = 3
			const x = current % grid
			const y = Math.floor(current / grid)
			const nextX = next % grid
			const nextY = Math.floor(next / grid)

			if (nextX > x && nextY === y) {
				return 'right'
			} else if (nextX < x && nextY === y) {
				return 'left'
			} else if (nextY > y && nextX === x) {
				return 'down'
			} else if (nextY < y && nextX === x) {
				return 'up'
			} else if (nextX > x && nextY > y) {
				return 'down-left'
			} else if (nextX < x && nextY > y) {
				return 'down-right'
			} else if (nextX > x && nextY < y) {
				return 'up-left'
			} else if (nextX < x && nextY < y) {
				return 'up-right'
			}
		}

		const nextDirection = getNextDirection(cell, nextCell)
		console.log('nextDirection', nextDirection)

		function getPreviousDirection(current: number, previous: number) {
			const grid = 3
			const x = current % grid
			const y = Math.floor(current / grid)
			const previousX = previous % grid
			const previousY = Math.floor(previous / grid)

			if (previousX > x && previousY === y) {
				return 'right'
			} else if (previousX < x && previousY === y) {
				return 'left'
			} else if (previousY > y && previousX === x) {
				return 'down'
			} else if (previousY < y && previousX === x) {
				return 'up'
			} else if (previousX > x && previousY > y) {
				return 'up-left'
			} else if (previousX < x && previousY > y) {
				return 'up-right'
			} else if (previousX > x && previousY < y) {
				return 'down-left'
			} else if (previousX < x && previousY < y) {
				return 'down-right'
			}
		}

		const previousCell = parseInt(sectionsArray[index - 1]?.dataset.cell)
		const previousDirection = getPreviousDirection(cell, previousCell)
		console.log('previousDirection', previousDirection)

		// kikkaile transformeilla niin, että seuraava slaidi on positiotu edellisen perusteella
		// että horisontaaliset skrollit tapahtuu samasta kohtaa

		if (index === 0) {
			timeline.fromTo(section, {
				'will-change': 'transform scale opacity',
				opacity: 0,
				scale: 1.5,
				rotateX: -75,
			}, {
				ease: 'none',
				opacity: 1,
				scale: 1,
				rotateX: 0,
				scrollTrigger: {
					trigger: section,
					scrub: true,
					start: 'top center',
					end: '0%',
				}
			})
		}

		if (previousDirection === 'up') {
			timeline.fromTo(section, {
				'will-change': 'scale opacity',
				opacity: 0,
			}, {
				ease: 'none',
				opacity: 1,
				scrollTrigger: {
					trigger: section,
					scrub: true,
					start: 'top center',
					end: '0%',
				}
			})
		}

		if (nextDirection === 'up-right') {
			timeline.fromTo(section, {
				'will-change': 'transform scale opacity',
				rotateY: 0,
				opacity: 1,
				xPercent: 0,
			}, {
				ease: 'none',
				rotateY: 90,
				opacity: 0,
				xPercent: -60,
				scrollTrigger: {
					markers: true,
					trigger: section,
					scrub: true,
					start: '90% 90%',
					end: '+=20%',
				}
			})
		}

		// if (nextDirection ===)


		// get the window size
		// const windowWidth = window.innerWidth
		// const windowHeight = window.innerHeight

		// const grid = 3
		// const x = index % grid
		// const y = Math.floor(index / grid)
		// const offsetX = windowWidth
		// const offsetY = windowHeight
		// const xPosition = x * offsetX
		// const yPosition = y * offsetY

		// // gsap.set(section, {
		// // 	x: xPosition,
		// // 	y: yPosition
		// // })

		// timeline.fromTo(section, {
		// 	'will-change': 'transform',
		// 	xPercent: -80,
		// 	opacity: 0,
		// 	rotateY: -90
		// }, {
		// 	ease: 'none',
		// 	xPercent: 0,
		// 	opacity: 1,
		// 	rotateY: 0,
		// 	scrollTrigger: {
		// 		markers: true,
		// 		trigger: section,
		// 		scrub: true,
		// 		start: 'top center',
		// 		end: '0%',
		// 	}
		// }).fromTo(section, {
		// 	'will-change': 'transform',
		// 	xPercent: 0,
		// 	opacity: 1,
		// 	rotateY: 0
		// }, {
		// 	ease: 'none',
		// 	xPercent: 80,
		// 	opacity: 0,
		// 	rotateY: 90,
		// 	scrollTrigger: {
		// 		markers: true,
		// 		trigger: section,
		// 		scrub: true,
		// 		start: 'bottom center',
		// 		end: '100%',
		// 	}
		
		// })
	})

		// gsap.timeline()
		// 	.fromTo(title, {
		// 		'will-change': 'transform',
		// 		xPercent: -80
		// 	}, {
		// 		ease: 'none',
		// 		xPercent: 0,
		// 		scrollTrigger: {
		// 			trigger: title,
		// 			scrub: true,
		// 			start: 'top center',
		// 			end: '+=100%',
		// 			pin: title?.parentNode
		// 		}
		// 	})
		// 	.fromTo(chars, {
		// 		'will-change': 'opacity, transform', 
    //         transformOrigin: '50% 50% -200px',
    //         rotationZ: -120,
		// 				rotationX: 120,
    //         opacity: 0,
		// 				y: 0,
		// 	},
		// 	{
		// 		ease: 'expo.inOut',
		// 		rotationZ: 0,
		// 		rotationX: 0,
		// 		z: 0,
		// 		opacity: 1,
		// 		stagger: -0.0375,
		// 		y: Math.random() * 10,
		// 		scrollTrigger: {
		// 				trigger: title,
		// 				start: 'center center',
		// 				end: '+=100%',
		// 				scrub: 1.2,
		// 		}
    //   })
</script>