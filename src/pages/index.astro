---
import Layout from "../layouts/Layout.astro";

import "splitting/dist/splitting.css";
import "splitting/dist/splitting-cells.css";
import ThoughtBlob from "../components/ThoughtBlob.astro";
import ExpandingImage from "../components/ExpandingImage.astro";
import BadBlob from "../components/BadBlob.astro";
import supabase from "../utils/supabase";

const { data: artworks } = await supabase
	.from('artworks')
	.select('*')
	.eq('thought_id', 1)

const firstHalfArtworks = artworks.slice(0, Math.ceil(artworks.length / 2))
const secondHalfArtWorks = artworks.slice(Math.ceil(artworks.length / 2), artworks.length)
const mainImage = artworks?.find((artwork) => artwork.is_main)

---
<Layout title="Home">
	<main>
		<div class="intro h-[100dvh] w-[100vw] fixed grid content-center z-[1000]">
			<div class="mx-auto max-w-[50vw] relative">
				<h1 data-splitting class="text-5xl font-black leading-none">Echoes of Creation</h1>
			</div>
			<div class="pointer-events-none blurred w-[200vw] h-[200dvh] absolute z-100 bg-black/10"></div>

			<button class="start-button rounded-full border border-white absolute py-4 px-8 bottom-24 left-0 right-0 w-fit mx-auto cursor-pointer z-50 transition-all hover:scale-110 hover:-translate-y-2 hover:bg-white hover:text-black">
				Start
			</button>
		</div>

		<header class="h-[100dvh] relative grid content-center">
			<div class="mx-auto max-w-[50vw] z-50 relative">
				<h2 data-splitting class="text-lg italic z-100 relative starting-title">
					Ah, there it isâ€”<strong>the spark of inspiration</strong>!
					<br />
					<br />
					That fleeting moment of clarity when an idea takes shape in my mind. It's exhilarating, like catching a glimpse of something magical.
				</h2>
			</div>

			<button class="continue-button rounded-full border border-white absolute py-4 px-8 bottom-24 left-0 right-0 w-fit mx-auto cursor-pointer z-50 transition-all hover:scale-110 hover:-translate-y-2 mix-blend-difference hover:bg-white hover:text-black">
				Continue
			</button>

			{artworks.map((artwork) => (
				<div class="artwork pointer-events-none z-10 absolute">
					<div class="artwork-inner">
						<img src={artwork.image_url} alt={artwork.title} class="w-full h-full object-cover" />
					</div>
				</div>
			))}
		</header>

		<div class="first h-[100dvh] grid justify-end">
			<div class="mx-auto max-w-[25vw] z-50 relative mr-24">
				<h2>
					FLOW
				</h2>
				<p data-splitting class="text-md italic z-100 relative flow-text">
					Time seems to melt away as I lose myself in the creative process. It's like being in a state of flow, where everything else fades into the background and only the art matters. It's pure magic.
				</p>
			</div>
		</div>

		<div id="main-grid" class="w-[100vw] h-[200dvh] relative">
			{firstHalfArtworks.map((artwork) => (
				<div class="absolute item-left rounded-md bg-white w-96 h-72 overflow-hidden">
					<img src={artwork.image_url} alt={artwork.title} class="w-full h-full object-cover" />
				</div>
			))}
			{secondHalfArtWorks.map((artwork) => (
				<div class="absolute item-right rounded-md bg-white w-96 h-72 overflow-hidden image-container">
					<img src={artwork.image_url} alt={artwork.title} class="w-full h-full object-cover" />
				</div>
			))}
		</div>
		
		<div class="flash-container h-[100dvh] opacity-0">
			 <div class="flash w-full h-full fixed top-0 bg-white opacity-0"></div>
		</div>

		<div class="second h-[100dvh]"></div>

		<div class="satisfaction h-[200dvh] grid justify-start">
			<div class="mx-auto max-w-[25vw] z-50 relative ml-24">
				<h2>
					SATISFACTION
				</h2>
				<p data-splitting class="text-md italic z-100 relative satisfaction-text">
					Stepping back and admiring the finished piece, there's a sense of satisfaction unlike anything else. It's a tangible manifestation of my imagination, a piece of myself laid bare for the world to see.
				</p>
			</div>
		</div>

		<div class="third h-[200dvh]"></div>

		<div class="fourth h-[100dvh]"></div>

		<div class="bad-thoughts h-[200dvh]"></div>

		<div class="fixed top-0 h-[100dvh] w-full z-50">
			<BadBlob text="Why is this happening? Who created this technology? They're taking away the essence of what it means to be an artist. Years of dedication, practice, and now it feels like it's all for nothing. I won't stand for it." />
			<BadBlob text="What does this mean for me? Will I become obsolete? Will people prefer AI-generated art over mine? How will I survive? The uncertainty is terrifying. I can't lose my identity as an artist." />
			<BadBlob text="What is this? AI that paints like me? How can that be? It's like my skills are being copied, replicated effortlessly. Is my art not unique anymore?" />
		</div>


<!-- 		





		<div class="fifth h-[150dvh] z-20"></div>

		<div class="sixth h-[100dvh] z-50"></div>



		<div class="stacked-variants h-[200dvh] z-50 grid grid-cols-8">
			<div class="stacked-variant-image z-[8] h-auto w-full mx-auto max-w-fit">
				<img src="https://picsum.photos/480/620" />
			</div>
			<div class="stacked-variant-image z-[7] h-auto w-full mx-auto max-w-fit">
				<img src="https://picsum.photos/480/620" />
			</div>
			<div class="stacked-variant-image z-[6] h-auto w-full mx-auto max-w-fit">
				<img src="https://picsum.photos/480/620" />
			</div>
			<div class="stacked-variant-image z-[5] h-auto w-full mx-auto max-w-fit">
				<img src="https://picsum.photos/480/620" />
			</div>
			<div class="stacked-variant-image z-[4] h-auto w-full mx-auto max-w-fit">
				<img src="https://picsum.photos/480/620" />
			</div>
			<div class="stacked-variant-image z-[3] h-auto w-full mx-auto max-w-fit">
				<img src="https://picsum.photos/480/620" />
			</div>
			<div class="stacked-variant-image z-[2] h-auto w-full mx-auto max-w-fit">
				<img src="https://picsum.photos/480/620" />
			</div>
			<div class="stacked-variant-image z-[1] h-auto w-full mx-auto max-w-fit">
				<img src="https://picsum.photos/480/620" />
			</div>
		</div>

		<div class="seventh h-[400dvh]">
			<div class="relative">
				<h2 class="plummet text-7xl font-black" style="text-orientation: upright; writing-mode: vertical-lr;">
					Plummet into
					<br />
					the Darkness
				</h2>	

				<h2 data-splitting class="what-the text-2xl font-bold">What the hell</h2>

				<div class="black-hole-wrapper absolute -top-1/2 left-12 w-72 h-60">
					<div class="w-1/2 h-1/2 rounded-full bg-indigo-300 absolute mix-blend-overlay blur-xl"></div>
					<svg class="overflow-visible w-full h-full" >
						<defs>
							<radialGradient id="black-hole-gradient" >
								<stop offset="10%" stop-color="#a5b4fc" />
								<stop offset="50%" stop-color="transparent" />
								<stop offset="75%" stop-color="#cbd5e1" />
								<stop offset="100%" stop-color="transparent" />
							</radialGradient>
	
							<filter id="black-hole-filter">
								<feDiffuseLighting in="SourceGraphic" result="light" lighting-color="white">
									<fePointLight x="25" y="20" z="10" />
								</feDiffuseLighting>
						
								<feComposite
									in="SourceGraphic"
									in2="light"
									operator="arithmetic"
									k1="1"
									k2="0"
									k3="0"
									k4="0"
									result="lighting"
									/>

								<feTurbulence baseFrequency="0.02" numOctaves="1" type="fractalNoise" result="turbulence">
									<animate
										attributeName="baseFrequency"
										values="0.1; 0.05; 0.03; 0.05; 0.1"
										dur="5s"
										repeatCount="indefinite"
										/>
								</feTurbulence>
								<feDisplacementMap in="lighting" in2="turbulence" scale="10" result="displacement">
									<animate
										attributeName="scale"
										values="50; 25; 50"
										dur="5s"
										repeatCount="indefinite"
										/>
								</feDisplacementMap>
								<feMorphology operator="dilate" radius="0.5" />
							</filter>
						</defs>
	
						<circle class="black-hole-circle overflow-visible" cx="100" cy="50" r="50" fill="url(#black-hole-gradient)" filter="url(#black-hole-filter)" />
					</svg>
				</div>

			</div>
		</div> -->

		<div class="main-images fixed top-0 left-0 w-full h-[100dvh] grid content-center items-center pointer-events-none">
			<div class="main-image z-[100] h-auto w-full absolute mx-auto max-w-fit left-0 right-0 border-4 border-black">
				<img src="https://picsum.photos/480/620" />
			</div>
			<div class="main-image z-[100] h-auto w-full absolute mx-auto max-w-fit left-0 right-0 border-4 border-black">
				<img src="https://picsum.photos/480/620" />
			</div>
			<div class="main-image z-[100] h-auto w-full absolute mx-auto max-w-fit left-0 right-0 border-4 border-black">
				<img src="https://picsum.photos/480/620" />
			</div>
			<div class="main-image z-[100] h-auto w-full absolute mx-auto max-w-fit left-0 right-0 border-4 border-black">
				<img src="https://picsum.photos/480/620" />
			</div>
			<div class="main-image z-[100] h-auto w-full absolute mx-auto max-w-fit left-0 right-0 border-4 border-black">
				<img src="https://picsum.photos/480/620" />
			</div>
			<div class="main-image z-[100] h-auto w-full absolute mx-auto max-w-fit left-0 right-0 border-4 border-black">
				<img src="https://picsum.photos/480/620" />
			</div>
			<div class="main-image z-[100] h-auto w-full absolute mx-auto max-w-fit left-0 right-0 border-4 border-black">
				<img src="https://picsum.photos/480/620" />
			</div>
			<div class="main-image z-[100] h-auto w-full absolute mx-auto max-w-fit left-0 right-0 border-4 border-black">
				<img src="https://picsum.photos/480/620" />
			</div>

			<svg>
				<filter id="pixelate" x="0" y="0">
					<feFlood x="4" y="4" height="2" width="2">
						<animate
							attributeName="height"
							values="2; 1; 2"
							dur="1s"
							repeatCount="indefinite"
							/>
						<animate
							attributeName="width"
							values="2; 1; 2"
							dur="1s"
							repeatCount="indefinite"
							/>
					</feFlood>
					<feComposite width="10" height="10">
						<animate
						attributeName="width"
						values="10; 1; 10"
						dur="1s"
						repeatCount="indefinite"
						/>
						<animate
						attributeName="height"
						values="10; 1; 10"
						dur="1s"
						repeatCount="indefinite"
						/>
					</feComposite>
					<feTile result="a"/>
					<feComposite in="SourceGraphic" in2="a" operator="in"/>
					<feMorphology operator="dilate" radius="5">
						<animate
						attributeName="radius"
						values="5; 0; 5"
						dur="1s"
						repeatCount="indefinite"
						/>
					</feMorphology>
				</filter>
			</svg>
		</div>

		<ThoughtBlob />
		<ExpandingImage image={mainImage.image_url} title={mainImage.title} />
	</main>
</Layout>

<style>
	.glow {
		width: 480px;
		height: 480px;
		background: green;
		border-radius: 50%;
		position: absolute;
		top: 0;
		left: 0;
		mix-blend-mode: difference;
	}

	:root {
		font-size: 13px;
		--color-text: #fff;
		--color-bg: #000;
		--color-link: #fff;
		--color-link-hover: #fff;
		--img-width: 190px;
		--img-ratio: 1.1;
		--img-offset-x: 20px;
		--img-offset-y: 20px;
		--img-border-radius: 7px;
		--color-bg-content: rgba(255,255,255,0.05);
		--color-bg-demos: rgba(255,255,255,0.05);
	}

	.artwork {
		width: var(--img-width);
		aspect-ratio: var(--img-ratio);
		border-radius: var(--img-border-radius);
		position: absolute;
		top: 0;
		left: 0;
		opacity: 0;
		overflow: hidden;
		will-change: transform, filter;
	}

	.artwork-inner {
		background-position: 50% 50%;
		width: calc(100% + var(--img-offset-x));
		height: calc(100% + var(--img-offset-y));
		background-size: cover;
		position: absolute;
		top: calc( -1 * var(--img-offset-y) / 2 );
		left: calc( -1 * var(--img-offset-x) / 2 );
	}

	.intro {
		/* background: radial-gradient(circle, rgba(126,56,119,1) 0%, rgba(173,104,139,1) 50%, rgba(244,156,193,1) 100%); */
		background: radial-gradient(circle, rgba(10, 10, 10, 1) 0%, rgba(25,25,25,1) 50%, rgba(50,50,50,1) 100%);
	}

	.blurred {
		--blur: 10px;
		mask-image: radial-gradient(circle, rgba(0,0,0,0) 0%,  rgba(0,0,0,1) 50%);
		filter: blur(var(--blur));
		backdrop-filter: blur(var(--blur));
	}

</style>

<script src="https://unpkg.com/imagesloaded@5/imagesloaded.pkgd.min.js"></script>

<script >
	import Lenis from '@studio-freight/lenis'
	import gsap from 'gsap'
	import ScrollTrigger from 'gsap/ScrollTrigger'
	import ScrollToPlugin from 'gsap/ScrollToPlugin'
	import Splitting from 'splitting'
	import { ImageTrail } from '../utils/ImageTrail'
	import { preloadImages } from '../utils/helpers'
	import { Howl } from 'howler';

	window.scrollTo(0, 0)

	Splitting()

	const lenis = new Lenis({
		lerp: 0.0375,
		// smoothWheel: true
	})

	lenis.on('scroll', ScrollTrigger.update)

	gsap.ticker.add((time) => {
		lenis.raf(time * 1000)
	})

	gsap.ticker.lagSmoothing(0)
	gsap.registerPlugin(ScrollTrigger, ScrollToPlugin)

	
	const intro = document.querySelector('.intro')
	const startButton = document.querySelector('.start-button')
	const introTitle = intro?.querySelector('h1')
	const introTitleChars = introTitle?.querySelectorAll('.char')
	const introTitleWords = introTitle?.querySelectorAll('.word')
	introTitleChars?.forEach(char => gsap.set(char.parentNode, { perspective: 1000 }));
	const startingTitle = document.querySelector('.starting-title')
	const startingTitleChars = startingTitle?.querySelectorAll('.char')

	if (introTitleChars) {
		gsap.fromTo(introTitleChars, {
		'will-change': 'opacity transform filter',
		opacity: 0,
		filter: 'blur(50px)',
		scale: 0
	}, {
		opacity: 1,
		ease: 'circ.out',
		scale: 1,
		filter: 'blur(0px)',
		stagger: 0.05,
		delay: 1.5,
		duration: 4
	})
	}


	let mousePos, lastMousePos, cacheMousePos;
	mousePos = { x: 0, y: 0 }; // current mouse position
	cacheMousePos = { ...mousePos }; // previous mouse position
	lastMousePos = { ...mousePos }; // stores the position of the mouse at the time the most recent image was displayed, serving as a reference point for calculating the distance the cursor has moved in subsequent frames
	const getPointerPos = (pointer) => {
		return {
			x: pointer.clientX,
			y: pointer.clientY,
		};
	};
	// This function will be used to handle both mouse and touch events
	const handlePointerMove = (ev) => {
		// If it's a touch event, we'll use the first touch point
		if (ev.touches) {
			mousePos = getPointerPos(ev.touches[0]);
		} else {
			// If it's a mouse event, proceed as usual
			mousePos = getPointerPos(ev);
		}
	};

	// Adding an event listener to the window to update mouse position on mousemove event
	window.addEventListener("mousemove", handlePointerMove);
	window.addEventListener("touchmove", handlePointerMove);

	const onPointerMoveEv = () => {
		// Initialize cacheMousePos with the current mousePos values.
		// This is necessary to have a reference point for the initial mouse position.
		cacheMousePos = { ...mousePos };
		// Initiate the rendering loop.
		requestAnimationFrame(() => tiltText());
		requestAnimationFrame(() => moveBlur());
		// Remove this mousemove event listener after it runs once to avoid reinitialization.
		window.removeEventListener("mousemove", onPointerMoveEv);
		window.removeEventListener("touchmove", onPointerMoveEv);
	};
	// Set up an initial mousemove event listener to run onMouseMoveEv once.
	window.addEventListener("mousemove", onPointerMoveEv);
	window.addEventListener("touchmove", onPointerMoveEv);

	function tiltText() {
		// Update the lastMousePos object with the current mouse position.
		lastMousePos = { ...mousePos };
		// Calculate the tilt angle based on the distance the cursor has moved.
		const tiltX = (cacheMousePos.x - mousePos.x) / 75;
		const tiltY = (mousePos.y - cacheMousePos.y) / 75;
		// Apply the tilt effect to the text element.
		gsap.set("h1", {
			rotationY: tiltX,
			rotationX: tiltY,
			transformPerspective: 1000,
			transformOrigin: "center",
		});
		gsap.set("h2", {
			rotationY: tiltX,
			rotationX: tiltY,
			transformPerspective: 1000,
			transformOrigin: "center",
		});

		requestAnimationFrame(() => tiltText());
	}

	function moveBlur(skip = false) {
		if (!skip) {
			gsap.to(".blurred", {
				x: mousePos.x - (window.innerWidth * 2) / 2,
				y: mousePos.y - (window.innerHeight * 2) / 2,
			});
		}

		requestAnimationFrame(() => {
			let skip = false
			
			if (
        mousePos.y + window.scrollY < intro.offsetTop ||
        mousePos.y + window.scrollY > intro.offsetTop + intro.offsetHeight
      ) {
        skip = true;
      }

			moveBlur(skip)
		});
	}

	startButton?.addEventListener('click', () => {
		gsap.to(intro, { opacity: 0, duration: 5 });
		document.body.classList.remove('overflow-hidden');
		window.scrollTo(0, 0)

		const introMusic = new Howl({
			src: ['/intro-music.mp3'],
			autoplay: false,
			loop: true,
			volume: 0,
		})

		const voiceOver = new Howl({
			src: ['/voiceover1.mp3'],
			autoplay: false,
			loop: false,
			onplay: (id: number) => requestAnimationFrame(() => highlightText(id)),
			onseek: console.log,
			volume: 0.5,
		})

		setTimeout(() => {
			voiceOver.play()
		}, 6000)
		
		setTimeout(() => {
			intro?.classList.add('pointer-events-none')
			introMusic.play()
			introMusic.fade(0, 0.15, 2000)
		}, 5250)

		gsap.fromTo(startingTitleChars, {
			'will-change': 'opacity transform filter',
			opacity: 0,
			filter: 'blur(10px)',
			yPercent: 50
		}, {
			ease: 'circ.out',
			opacity: 1,
			filter: 'blur(0px)',
			yPercent: 0,
			stagger: 0.025,
			delay: 6.5
		})

		gsap.fromTo('.thought-blob', {
			'will-change': 'opacity transform',
			opacity: 0,
			yPercent: 50,
		}, {
			yPercent: 35,
			opacity: 1,
			delay: 7.5,
			duration: 2,
		})
	})

	// const currentTime = audioPlayer.currentTime
	// 	// Toggle the "active" class for each span tag based on the current time
	// 	syncData.forEach((item, index) => {
	// 		const spanTag = lyricsContainer.children[index]

	// 		if (currentTime >= item.start) {
	// 			spanTag.classList.add("active")
	// 		}
	// 	})

	function highlightText(id: number) {
		// Determine our current seek position.
		// const seek = Howler.seek(undefined, id)
		// console.log(seek)
		// console.log(Howler)
		// If the sound is still playing, continue stepping.
		// if (sound.playing()) {
			requestAnimationFrame(() => highlightText(id));
		// }
	}

	preloadImages().then(() => {
    // Once all images are preloaded, remove the 'loading' class from the body element.

    // Instantiate a new ImageTrail object, initializing it with the element that has the class 'content'.
    // The ImageTrail instance starts managing and animating the sequence of images within the specified element, reacting to mouse movements.
		new ImageTrail(document.querySelector('header'), gsap)
	});


	const timeline = gsap.timeline({
			scrollTrigger: {
				snap: {
					snapTo: 'labels'
				}
			}
		})

		const firstSection = document.querySelector('.first-section')
		const mainGrid = document.querySelector('#main-grid')
		const second = document.querySelector('.second')
		const third = document.querySelector('.third')
		const items = mainGrid.querySelectorAll('.item-left')
		const itemsRight = mainGrid.querySelectorAll('.item-right')
		// const title = document.querySelector('.what-the')
		// const chars = title.querySelectorAll('.char')
		const flowTextChars = document.querySelector('.flow-text').querySelectorAll('.char')
		const satisfactionTextChars = document.querySelector('.satisfaction-text').querySelectorAll('.char')
		const stackedVariantImages = document.querySelectorAll('.stacked-variant-image')

		// chars.forEach(char => gsap.set(char.parentNode, { perspective: 1000 }));
		items.forEach(item => gsap.set(item, { z: () => gsap.utils.random(-1, 1), scale: () => gsap.utils.random(1, 3) }))
		itemsRight.forEach(item => gsap.set(item, { z: () => gsap.utils.random(-1, 1), scale: () => gsap.utils.random(1, 3) }))
		stackedVariantImages.forEach(image => gsap.set(image, { perspective: 1000 }))
		gsap.set('.thought-blob', { yPercent: 50, scale: 0.5 })
		gsap.set('.flash', { opacity: 0 })
		// gsap.fromTo(startingTitleWords, {
		// 	'will-change': 'opacity transform filter',
		// 	opacity: 0,
		// 	filter: 'blur(35px)',
		// 	yPercent: 50
		// }, {
		// 	ease: 'circ.out',
		// 	opacity: 1,
		// 	filter: 'blur(0px)',
		// 	yPercent: 0,
		// 	stagger: 0.075,
		// 	delay: 1.5,
		// })
		
		// gsap.fromTo('.continue-button', {
		// 	'will-change': 'opacity transform',
		// 	scale: 0.5,
		// 	opacity: 0,
		// 	yPercent: 50
		// }, {
		// 	scale: 1,
		// 	opacity: 1,
		// 	yPercent: 0,
		// 	delay: 3.5
		// })

		gsap.set(mainGrid, { perspective: 200, perspectiveOrigin: '57.5% 30%' })
		gsap.set('.thought-blob', { yPercent: 35, scale: 0.5 })
		gsap.set('.second', { perspective: 1000 })
		gsap.set('.third', { perspective: 1000 })
		gsap.set('.fourth', { perspective: 1000 })
		gsap.set('.fifth', { perspective: 1000 })
		gsap.set('.sixth', { perspective: 1000 })
		gsap.set('.seventh', { perspective: 1000 })
		// gsap.set('.bad-blob', { scale: 0 })
		// gsap.set('.bad-blob-wrapper', { y: window.innerHeight })

		timeline
			.add(() => {
				gsap.fromTo(flowTextChars, {
					'will-change': 'opacity transform filter',
					opacity: 0,
					filter: 'blur(10px)',
					yPercent: 50
				}, {
					ease: 'circ.out',
					opacity: 1,
					filter: 'blur(0px)',
					yPercent: 0,
					stagger: 0.025,
					scrollTrigger: {
						pin: '.first',
						trigger: '.first',
						start: 'top center',
						end: 'bottom',
					}
				})
			})
			.fromTo('.thought-blob', {
				yPercent: 35,
				scale: 0.5
			}, {
				yPercent: 0,
				scale: 1,
				scrollTrigger: {
					trigger: '.first',
					scrub: true,
					start: 'top center',
					end: 'bottom-=50%',
				}
			})
			.fromTo(items, {
				z: () => gsap.utils.random(20, -1),
				x: () => gsap.utils.random(window.innerHeight * -2, window.innerHeight * -2 - 500),
				y: () => gsap.utils.random(window.innerHeight * 2, -window.innerHeight),
				filter: 'blur(30px)'
			}, {
				x: 0,
				scale: 0,
				z: -window.innerHeight,
				y: 0,
				filter: 'blur(0px)',
				stagger: 0.02,
				scrollTrigger: {
					pin: mainGrid,
					trigger: mainGrid,
					scrub: true,
					start: 'top top',
					end: 'bottom center',
				}
			})
			.fromTo(itemsRight, {
				z: () => gsap.utils.random(20, -1),
				x: () => gsap.utils.random(window.innerWidth * 2, window.innerWidth * 2 + 500),
				y: () => gsap.utils.random(window.innerHeight * 2, -window.innerHeight),
				filter: 'blur(30px)'
			}, {
				x: 0,
				scale: 0,
				z: -window.innerHeight,
				y: 0,
				filter: 'blur(0px)',
				stagger: 0.02,
				scrollTrigger: {
					trigger: mainGrid,
					scrub: true,
					start: 'top top',
					end: 'bottom center',
				}
			})
			.fromTo('.blob-circle', {
				r: 10,
			}, {
				r: 0,
				scrollTrigger: {
					trigger: mainGrid,
					scrub: true,
					start: (self) => self.previous().end,
					end: 'bottom-=5%',
				}
			})
			.fromTo('.flash-container', 
			{
				opacity: 0
			},
			{
				opacity: 0.75,
				scrollTrigger: {
					trigger: '.flash-container',
					scrub: true,
					start: (self) => self.previous().end,
					end: 'bottom',
				}
			})
			.fromTo('.actual-expanding-image', {
				filter: 'blur(20px)',
				scale: 5,
			}, {
				scale: 1,
				filter: 'blur(0px)',
				scrollTrigger: {
					trigger: second,
					scrub: true,
					start: 'top top',
					end: 'bottom-=50%',
				}
			})
			.fromTo('.flash', 
			{
				opacity: 1
			},
			{
				opacity: 0,
				scrollTrigger: {
					trigger: second,
					scrub: true,
					start: 'top bottom',
					end: 'bottom',
				}
			})
			.fromTo('.glow-circle', {
				r: 0,
				cx: window.innerWidth / 2,
				cy: window.innerHeight / 2,
			}, {
				r: window.innerWidth,
				scrollTrigger: {
					trigger: second,
					scrub: true,
					start: 'top top',
					end: 'bottom-=50%',
				}
			})
			.fromTo('.hole-circle', {
				r: 0,
				cx: window.innerWidth / 2,
				cy: window.innerHeight / 2,
			}, {
				r: window.innerWidth,
				scrollTrigger: {
					trigger: second,
					scrub: true,
					start: 'top top',
					end: 'bottom-=50%',
				}
			})
			.fromTo('.hole-circle', {
				r: 0,
			}, {
				r: window.innerWidth,
				scrollTrigger: {
					trigger: second,
					scrub: true,
					start: 'top top',
					end: 'bottom-=50%',
				}
			})
			.fromTo('.hole-circle', {
				opacity: 1,
			}, {
				opacity: 0,
				scrollTrigger: {
					trigger: second,
					scrub: true,
					start: (self) => self.previous().end,
					end: (self) => self.previous().end,
				}
			})
			.fromTo('.main-image-title', {
				opacity: 0,
			}, {
				opacity: 1,
				scrollTrigger: {
					start: 'top bottom',
					end: 'bottom',
					trigger: '.satisfaction'
				}
			})
			.add(() => {
				gsap.fromTo(satisfactionTextChars, {
					'will-change': 'opacity transform filter',
					opacity: 0,
					filter: 'blur(10px)',
					yPercent: 50
				}, {
					ease: 'circ.out',
					opacity: 1,
					filter: 'blur(0px)',
					yPercent: 0,
					stagger: 0.025,
					scrollTrigger: {
						pin: '.satisfaction',
						start: 'top center',
						end: 'bottom',
						trigger: '.satisfaction'
					}
				})
			})
			.fromTo('.main-image', {
				opacity: 0,
				scale: 0,
				filter: 'blur(25px)',
				yPercent: (index) => {
					const position = index % 3

					if (index === 3) {
						return 0
					}

					if (index === 7) {
						return -125
					}

					if (index < 3) {
						if (position === 1) return -125
						if (position === 0) return 125

						return 0
					}

					if (position === 1) return 125
					if (position === 0) return -125
					return 125

				},
				xPercent: (index) => {
					const position = index % 3

					if (index === 3) {
						return -125
					}

					if (index === 7) {
						return 125
					}

					if (index < 3) {
						if (position === 1) return -125
						if (position === 0) return 0
						return 125
					}


					if (position === 1) return -125
					if (position === 0) return 0
					return 125
				},
			}, {
				opacity: 1,
				scale: 1,
				stagger: 0.2,
				scrollTrigger: {
					pin: '.third',
					trigger: '.third',
					scrub: true,
					start: 'top+=100% top',
					end: 'bottom+=100%',
				}
			})
			.fromTo('.main-image', {
				filter: 'blur(25px)',
				yPercent: (index) => {
					const position = index % 3

					if (index === 3) {
						return 0
					}

					if (index === 7) {
						return -125
					}

					if (index < 3) {
						if (position === 1) return -125
						if (position === 0) return 125

						return 0
					}

					if (position === 1) return 125
					if (position === 0) return -125
					return 125

				},
				xPercent: (index) => {
					const position = index % 3

					if (index === 3) {
						return -125
					}

					if (index === 7) {
						return 125
					}

					if (index < 3) {
						if (position === 1) return -125
						if (position === 0) return 0
						return 125
					}


					if (position === 1) return -125
					if (position === 0) return 0
					return 125
				},
			}, {
				yPercent: (index) => {
					const position = index % 3

					if (index === 3) {
						return 0
					}

					if (index === 7) {
						return -100
					}

					if (index < 3) {
						if (position === 1) return -100
						if (position === 0) return 100

						return 0
					}

					if (position === 1) return 100
					if (position === 0) return -100
					return 100

				},
				xPercent: (index) => {
					const position = index % 3

					if (index === 3) {
						return -100
					}

					if (index === 7) {
						return 100
					}

					if (index < 3) {
						if (position === 1) return -100
						if (position === 0) return 0
						return 100
					}


					if (position === 1) return -100
					if (position === 0) return 0
					return 100
				},
				filter: 'blur(0px)',
				scrollTrigger: {
					trigger: '.fourth',
					scrub: true,
					start: 'top top',
					end: 'bottom',
				}
			})
			.fromTo('.actual-expanding-image', {
				opacity: 1,
				y: 0
			}, {
				y: 10,
				scrollTrigger: {
					trigger: '.fourth',
					scrub: true,
					start: 'top top',
					end: 'bottom',
				}
			})
			.fromTo('.expanding-image-wrapper', {
				scale: 1,
				opacity: 1,
				filter: 'blur(0px)',
			}, {
				scale: 0.75,
				opacity: 0.1,
				filter: 'blur(5px)',
				scrollTrigger: {
					trigger: '.fourth',
					scrub: true,
					start: 'top top',
					end: 'bottom',
				}
			})
			.fromTo('.expanding-image', {
				yPercent: 0,
			}, {
				yPercent: -125,
				scrollTrigger: {
					trigger: '.bad-thoughts',
					scrub: true,
					start: 'top top',
					end: 'bottom+=100%'
				}
			})
			.fromTo('.main-images', {
				yPercent: 0,
			}, {
				yPercent: -125,
				scrollTrigger: {
					trigger: '.bad-thoughts',
					scrub: true,
					start: 'top top',
					end: 'bottom+=100%',
				}
			})
			.fromTo('.bad-blob-wrapper', {
				y: window.innerHeight,
				x: () => gsap.utils.random(window.innerWidth * 0.25, window.innerWidth * 0.75),
			}, {
				y: 0,
				stagger: 0.1,
				scrollTrigger: {
					markers: true,
					trigger: '.bad-thoughts',
					scrub: true,
					start: 'top top',
					end: 'bottom+=100%'
				}
			})
			// .fromTo('.stacked-variant-image', {
			// 	xPercent: (index) => -100 * index,
			// 	rotateY: 0,
			// 	rotateX: 0,
			// 	rotateZ: 0,
			// 	yPercent: 0
			// }, {
			// 	xPercent: (index) => 90 * index,
			// 	rotateY: (index) => 10 * index,
			// 	rotateX: (index) => -10 * index,
			// 	rotateZ: (index) => 5 * index,
			// 	yPercent: (index) => 5 * index,
			// 	scrollTrigger: {
			// 		trigger: '.stacked-variants',
			// 		scrub: true,
			// 		start: 'top bottom',
			// 		end: 'bottom+=10%',
			// 	}
			// })
			// .fromTo(title, {
			// 		'will-change': 'transform',
			// 		xPercent: 30
			// 	}, {
			// 		ease: 'none',
			// 		xPercent: -10,
			// 		scrollTrigger: {
			// 			trigger: '.seventh',
			// 			// markers: true,
			// 			scrub: true,
			// 			start: 'top bottom',
			// 			end: 'bottom-=50%',
			// 		}
			// 	})
			// 	.fromTo(chars, {
			// 		'will-change': 'opacity, transform', 
			// 		transformOrigin: '50% 50% -50px',
			// 		rotationZ: 0,
			// 		rotationX: 0,
			// 		opacity: 1,
			// 	},
			// 	{
			// 		ease: 'expo.inOut',
			// 		rotationZ: -120,
			// 		rotationX: 120,
			// 		opacity: 0,
			// 		stagger: 0.0375,
			// 		scrollTrigger: {
			// 			trigger: '.seventh',
			// 			// markers: true,
			// 			start: 'top bottom',
			// 			end: 'bottom-=75%',
			// 			scrub: true,
			// 		}
			// 	})
			// 	.fromTo('.black-hole-circle', {
			// 		r: 50,
			// 	},
			// 	{
			// 		r: 200,
			// 		scrollTrigger: {
			// 			trigger: '.seventh',
			// 			// markers: true,
			// 			start: 'top bottom',
			// 			end: 'bottom-=75%',
			// 			scrub: true,
			// 		}
			// 	})
			// 	.fromTo('.black-hole-wrapper', {
			// 		scale: 0,
			// 		rotateY: 20,
			// 		rotateX: 10,
			// 		xPercent: 0
			// 	},
			// 	{
			// 		scale: 1,
			// 		rotateY: 90,
			// 		rotateX: 40,
			// 		xPercent: 20,
			// 		scrollTrigger: {
			// 			trigger: '.seventh',
			// 			// markers: true,
			// 			start: 'top bottom',
			// 			end: 'bottom-=75%',
			// 			scrub: true,
			// 		}
			// 	})
		



	
		// .fromTo('.expanding-image', {
		// 	height: '100dvh',
		// 	scale: 1,
		// 	// y: window.innerHeight * -1.5,
		// 	// transformOrigin: 'center center'
		// }, {
		// 	height: window.innerHeight * 0.75,
		// 	scale: 0.5,
		// 	scrollTrigger: {
		// 		pin: second,
		// 		markers: true,
		// 		trigger: second,
		// 		scrub: true,
		// 		start: (self) => self.previous().end,
		// 		end: 'bottom',
		// 	}
		// })
		// .fromTo('.expanding-image', {
		// 	opacity: 1,
		// }, {
		// 	opacity: 0,
		// 	scrollTrigger: {
		// 		markers: true,
		// 		trigger: third,
		// 		scrub: true,
		// 		start: (self) => self.previous().end,
		// 		end: (self) => self.previous().end,
		// 	}
		// })
		// .fromTo('.main-image', {
		// 	opacity: 0,
		// 	scale: 0
		// }, {
		// 	opacity: 1,
		// 	scale: 0.5,
		// 	scrollTrigger: {
		// 		// markers: true,
		// 		pin: third,
		// 		pinSpacing: true,
		// 		trigger: third,
		// 		scrub: true,
		// 		start: 'top top',
		// 		end: 'bottom-=50%'
		// 	}
		// })
		// .fromTo('.top-images', {
		// 	opacity: 0,
		// }, {
		// 	opacity: 1,
		// 	scrollTrigger: {
		// 		trigger: third,
		// 		scrub: true,
		// 		start: (self) => self.previous().end,
		// 		end: 'bottom+=100%',
		// 	}
		// })
		// .fromTo('.bottom-images', {
		// 	opacity: 0,
		// }, {
		// 	opacity: 1,
		// 	scrollTrigger: {
		// 		trigger: third,
		// 		scrub: true,
		// 		start: (self) => self.previous().end,
		// 		end: 'bottom+=100%',
		// 	}
		// })

	// const sections = document.querySelectorAll('section')
	// const act1Title = document.querySelector('.act-1-title')
	// const act1TitleChars = act1Title?.querySelectorAll('.char')
	
	// act1TitleChars?.forEach(char => gsap.set(char.parentNode, { perspective: 500 }));

	// const sectionContent = document.querySelectorAll('.content')

	// document.addEventListener('pointermove', handleContentTilting)

	// function handleContentTilting(e: PointerEvent) {
	// 	const { clientX, clientY } = e
	// 	const centerX = window.innerWidth / 2
	// 	const centerY = window.innerHeight / 2

	// 	sectionContent.forEach((content) => {
	// 		const rect = content.getBoundingClientRect()
	// 		const cardX = rect.left + rect.width / 2
	// 		const cardY = rect.top + rect.height / 2
	// 		const dx = clientX - cardX
	// 		const dy = clientY - cardY
	// 		const tiltX = -(dy / centerY)
	// 		const tiltY = (dx / centerX)

	// 		gsap.to(content, {
	// 			rotateX: tiltX,
	// 			rotateY: tiltY,
	// 			x: tiltY,
	// 			y: tiltX,
	// 			ease: 'power2.out'
	// 		})
	// 	})
	// }

	// sections.forEach((section, index, sectionsArray) => {
		// position sections in random order in a 9 point grid based in window size
		// each grid cell is the full width and height of the window
		// 1 2 3
		// 4 5 6
		// 7 8 9
		// data-attributes to determine order in the grid
		// e.g. if first section is 5, it will be in the middle
		// if second section is 1, it will be in the top left corner
		// check where the next section is positioned in relation to the current/previous one
		// e.g. if current section is 5 and next section is 1, it will be in the top left corner
		// if current section is 5 and next section is 6, it will be in the middle right
		// get the direction of the next section in relation to the current one

		// const cell = parseInt(section.dataset.cell)
		// const nextCell = parseInt(sectionsArray[index + 1]?.dataset.cell)
		// // get the direction of the next section in relation to the current one
		// // should be one of the following: down, up, left, right, down-left, down-right, up-left, up-right
		// const nextDirection = getNextDirection(cell, nextCell)
		// const nextCellElement = sectionsArray[index + 1]
		// console.log('nextDirection', cell, nextDirection)
		

		// if (index === 0) {
		// 	timeline
		// 	.fromTo(act1TitleChars, {
		// 		'will-change': 'opacity transform filter',
		// 		opacity: 0,
		// 		filter: 'blur(15px)',
		// 		yPercent: 50
		// 	}, {
		// 		opacity: 1,
		// 		filter: 'blur(0px)',
		// 		yPercent: 0,
		// 		stagger: 0.05,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: window.innerHeight / 3,
		// 			end: window.innerHeight + 600,
		// 		}
		// 	})
		// 	.fromTo(section, {
		// 		'will-change': 'transform opacity',
		// 		y: 0,
		// 	}, {
		// 		ease: 'none',
		// 		y: -window.innerHeight,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: (self) => self.previous().end,
		// 			end: (self) => {
		// 				return self.previous().end + section.clientHeight 
		// 			},
		// 		}
		// 	})
			// .fromTo(section, {
			// 	'will-change': 'transform opacity',
			// 	opacity: 1,
			// 	rotateX: -30,
			// }, {
			// 	ease: 'none',
			// 	opacity: 1,
			// 	rotateX: 0,
			// 	scrollTrigger: {
			// 		scrub: true,
			// 		start: 100,
			// 		end: window.innerHeight + 100,
			// 	}
			// }, '<')

			// .fromTo(section, {
			// 	'will-change': 'transform opacity',
			// 	y: -window.innerHeight,
			// }, {
			// 	ease: 'none',
			// 	y: -window.innerHeight * 2,
			// 	scrollTrigger: {
			// 		scrub: true,
			// 		start: (self) => window.innerHeight * 2 + 100,
			// 		end: (window.innerHeight + 100)  * 3,
			// 	}
			// })
		// }

		
		// if (nextDirection === 'up') {
		// 	timeline.fromTo(section, {
		// 		'will-change': 'scale opacity transform',
		// 		scale: 1,
		// 		opacity: 1,
		// 		rotateX: 0,
		// 		yPercent: 0,
		// 	}, {
		// 		ease: 'none',
		// 		scale: 2,
		// 		opacity: 0,
		// 		rotateX: 90,
		// 		yPercent: -20,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 			end: '+=100%',
		// 		}
		// 	}, '<')
		// 	.fromTo(nextCellElement, {
		// 		'will-change': 'scale opacity transform',
		// 		scale: 0,
		// 		opacity: 0,
		// 		rotateX: 90,
		// 		yPercent: -20,
		// 	}, {
		// 		ease: 'none',
		// 		scale: 1,
		// 		opacity: 1,
		// 		rotateX: 0,
		// 		yPercent: 0,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 			end: '+=100%',
		// 		}
		// 	}, '<')
		// }

		// if (nextDirection === 'up-right') {
		// 	timeline.fromTo(section, {
		// 		'will-change': 'transform scale opacity',
		// 		xPercent: 0,
		// 		yPercent: 0,
		// 		rotateX: 0,
		// 		rotateY: 0,
		// 		rotateZ: 0,
		// 		opacity: 1
		// 	}, {
		// 		ease: 'none',
		// 		xPercent: -100,
		// 		yPercent: 100,
		// 		rotateX: 90,
		// 		rotateY: 120,
		// 		rotateZ: -45,
		// 		opacity: 0,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 			end: '+=100%',
		// 		}
		// 	}, '<')
		// 	.fromTo(nextCellElement, {
		// 		'will-change': 'transform scale opacity',
		// 		xPercent: 100,
		// 		opacity: 0,
		// 		scale: 0.5,
		// 		yPercent: -100,
		// 		rotateX: -90,
		// 		rotateY: -120,
		// 		rotateZ: 45,
		// 	}, {
		// 		ease: 'none',
		// 		xPercent: 0,
		// 		yPercent: 0,
		// 		rotateX: 0,
		// 		rotateY: 0,
		// 		rotateZ: 0,
		// 		scale: 1,
		// 		opacity: 1,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 			end: '+=100%',
		// 		}
		// 	}, '<')
		// }

		// if (nextDirection === 'up-left') {
		// 	timeline
		// 	.fromTo(section, {
		// 		'will-change': 'transform scale opacity',
		// 		xPercent: 0,
		// 		yPercent: 0,
		// 		rotateX: 0,
		// 		rotateY: 0,
		// 		rotateZ: 0,
		// 		opacity: 1
		// 	}, {
		// 		ease: 'none',
		// 		xPercent: 100,
		// 		yPercent: 100,
		// 		rotateX: 90,
		// 		rotateY: -120,
		// 		rotateZ: 45,
		// 		opacity: 0,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 			end: '+=100%',
		// 		}
		// 	}, '<')
		// 	.fromTo(nextCellElement, {
		// 		'will-change': 'transform scale opacity',
		// 		xPercent: -100,
		// 		opacity: 0,
		// 		scale: 0.5,
		// 		yPercent: -100,
		// 		rotateX: -90,
		// 		rotateY: 120,
		// 		rotateZ: -45,
		// 	}, {
		// 		ease: 'none',
		// 		xPercent: 0,
		// 		yPercent: 0,
		// 		rotateX: 0,
		// 		rotateY: 0,
		// 		rotateZ: 0,
		// 		scale: 1,
		// 		opacity: 1,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 			end: '+=100%'
		// 		}
		// 	}, '<')
		// }

		// if (nextDirection === 'down') {
		// 	timeline.fromTo(section, {
		// 			'will-change': 'transform opacity',
		// 			yPercent: 0,
		// 			opacity: 1
		// 		}, {
		// 			ease: 'none',
		// 			yPercent: -100,
		// 			opacity: 0,
		// 			scrollTrigger: {
		// 				scrub: true,
		// 				start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 				end: '+=100%',
		// 			}
		// 		}, '<')
		// 		.fromTo(nextCellElement, {
		// 			'will-change': 'transform opacity',
		// 			yPercent: 100,
		// 			opacity: 0,
		// 		}, {
		// 			ease: 'none',
		// 			yPercent: 0,
		// 			opacity: 1,
		// 			scrollTrigger: {
		// 				scrub: true,
		// 				start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 				end: '+=100%',
		// 			}
		// 		}, '<')
		// }

		// if (nextDirection === 'down-right') {
		// 	timeline.fromTo(section, {
		// 		'will-change': 'transform opacity',
		// 		xPercent: 0,
		// 		yPercent: 0,
		// 		opacity: 1,
		// 		rotateX: 0,
		// 		rotateY: 0,
		// 		rotateZ: 0,
		// 	}, {
		// 		ease: 'none',
		// 		xPercent: -100,
		// 		opacity: 0,
		// 		yPercent: -100,
		// 		rotateX: -90,
		// 		rotateY: 120,
		// 		rotateZ: -45,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 			end: '+=100%',
		// 		}
		// 	}, '<')
		// 	.fromTo(nextCellElement, {
		// 		'will-change': 'transform opacity',
		// 		xPercent: 100,
		// 		opacity: 0,
		// 		yPercent: 100,
		// 		rotateX: 90,
		// 		rotateY: -120,
		// 		rotateZ: 45,
		// 	}, {
		// 		ease: 'none',
		// 		xPercent: 0,
		// 		opacity: 1,
		// 		yPercent: 0,
		// 		rotateX: 0,
		// 		rotateY: 0,
		// 		rotateZ: 0,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 			end: '+=100%'
		// 		}
		// 	}, '<')
		// }

		// if (nextDirection === 'down-left') {
		// 	timeline.fromTo(section, {
		// 		'will-change': 'transform opacity',
		// 		xPercent: 0,
		// 		yPercent: 0,
		// 		opacity: 1,
		// 		rotateX: 0,
		// 		rotateY: 0,
		// 		rotateZ: 0,
		// 	}, {
		// 		ease: 'none',
		// 		xPercent: 100,
		// 		opacity: 0,
		// 		yPercent: -100,
		// 		rotateX: 90,
		// 		rotateY: 120,
		// 		rotateZ: 45,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 			end: '+=100%',
		// 		}
		// 	}, '<')
		// 	.fromTo(nextCellElement, {
		// 		'will-change': 'transform opacity',
		// 		xPercent: -100,
		// 		opacity: 0,
		// 		yPercent: 100,
		// 		rotateX: 90,
		// 		rotateY: 120,
		// 		rotateZ: -45,
		// 	}, {
		// 		ease: 'none',
		// 		xPercent: 0,
		// 		opacity: 1,
		// 		yPercent: 0,
		// 		rotateX: 0,
		// 		rotateY: 0,
		// 		rotateZ: 0,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 			end: '+=100%',
		// 		}
		// 	}, '<')
		// }

		// if (nextDirection === 'left') {
		// 	timeline.fromTo(section, {
		// 		'will-change': 'transform opacity',
		// 		xPercent: 0,
		// 		rotateY: 0,
		// 		opacity: 1
		// 	}, {
		// 		ease: 'none',
		// 		xPercent: 100,
		// 		opacity: 0,
		// 		rotateY: 120,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 			end: '+=100%',
		// 		}
		// 	}, '<')
		// 	.fromTo(nextCellElement, {
		// 		'will-change': 'transform opacity',
		// 		xPercent: -100,
		// 		rotateY: -120,
		// 		opacity: 0,
		// 	}, {
		// 		ease: 'none',
		// 		xPercent: 0,
		// 		opacity: 1,
		// 		rotateY: 0,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 			end: '+=100%',
		// 		}
		// 	}, '<')
		// }

		// if (nextDirection === 'right') {
		// 	timeline.fromTo(section, {
		// 		'will-change': 'transform opacity',
		// 		xPercent: 0,
		// 		rotateY: 0,
		// 		opacity: 1
		// 	}, {
		// 		ease: 'none',
		// 		xPercent: -100,
		// 		opacity: 0,
		// 		rotateY: -120,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 			end: '+=100%',
		// 		}
		// 	}, '<')
		// 	.fromTo(nextCellElement, {
		// 		'will-change': 'transform opacity',
		// 		xPercent: 100,
		// 		opacity: 0,
		// 		rotateY: 120,
		// 	}, {
		// 		ease: 'none',
		// 		xPercent: 0,
		// 		opacity: 1,
		// 		rotateY: 0,
		// 		scrollTrigger: {
		// 			scrub: true,
		// 			start: (self) => section.clientHeight * (index + 1), // self.previous().end,
		// 			end: '+=100%',
		// 		}
		// 	}, '<')
		// }

		// if (index === 0) return
		// gsap.set(section, { perspective: 500, opacity: 0 })
	// })

	function getNextDirection (current: number, next: number) {
		const grid = 3
		const x = current % grid
		const y = Math.floor(current / grid)
		const nextX = next % grid
		const nextY = Math.floor(next / grid)

		if (nextX > x && nextY === y) {
			return 'right'
		} else if (nextX < x && nextY === y) {
			return 'left'
		} else if (nextY > y && nextX === x) {
			return 'down'
		} else if (nextY < y && nextX === x) {
			return 'up'
		} else if (nextX > x && nextY > y) {
			return 'down-left'
		} else if (nextX < x && nextY > y) {
			return 'down-right'
		} else if (nextX > x && nextY < y) {
			return 'up-left'
		} else if (nextX < x && nextY < y) {
			return 'up-right'
		}
	}

	// console.log(artworks)
</script>